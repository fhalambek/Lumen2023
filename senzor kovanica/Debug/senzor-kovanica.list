
senzor-kovanica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003434  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080035cc  080035cc  000135cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035f8  080035f8  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  080035f8  080035f8  000135f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003600  08003600  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003600  08003600  00013600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003604  08003604  00013604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08003608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000040  08003644  00020040  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08003644  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003cfc  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ef8  00000000  00000000  00023d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  00024c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020a0  00000000  00000000  00025748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000bab2  00000000  00000000  000277e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000029b0  00000000  00000000  0003329a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00035c4a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000029c0  00000000  00000000  00035c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000040 	.word	0x20000040
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080035b4 	.word	0x080035b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000044 	.word	0x20000044
 80001d4:	080035b4 	.word	0x080035b4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__gedf2>:
 8000550:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000554:	e006      	b.n	8000564 <__cmpdf2+0x4>
 8000556:	bf00      	nop

08000558 <__ledf2>:
 8000558:	f04f 0c01 	mov.w	ip, #1
 800055c:	e002      	b.n	8000564 <__cmpdf2+0x4>
 800055e:	bf00      	nop

08000560 <__cmpdf2>:
 8000560:	f04f 0c01 	mov.w	ip, #1
 8000564:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000568:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800056c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000570:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000574:	bf18      	it	ne
 8000576:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800057a:	d01b      	beq.n	80005b4 <__cmpdf2+0x54>
 800057c:	b001      	add	sp, #4
 800057e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000582:	bf0c      	ite	eq
 8000584:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000588:	ea91 0f03 	teqne	r1, r3
 800058c:	bf02      	ittt	eq
 800058e:	ea90 0f02 	teqeq	r0, r2
 8000592:	2000      	moveq	r0, #0
 8000594:	4770      	bxeq	lr
 8000596:	f110 0f00 	cmn.w	r0, #0
 800059a:	ea91 0f03 	teq	r1, r3
 800059e:	bf58      	it	pl
 80005a0:	4299      	cmppl	r1, r3
 80005a2:	bf08      	it	eq
 80005a4:	4290      	cmpeq	r0, r2
 80005a6:	bf2c      	ite	cs
 80005a8:	17d8      	asrcs	r0, r3, #31
 80005aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ae:	f040 0001 	orr.w	r0, r0, #1
 80005b2:	4770      	bx	lr
 80005b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d102      	bne.n	80005c4 <__cmpdf2+0x64>
 80005be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005c2:	d107      	bne.n	80005d4 <__cmpdf2+0x74>
 80005c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005cc:	d1d6      	bne.n	800057c <__cmpdf2+0x1c>
 80005ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005d2:	d0d3      	beq.n	800057c <__cmpdf2+0x1c>
 80005d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__aeabi_cdrcmple>:
 80005dc:	4684      	mov	ip, r0
 80005de:	4610      	mov	r0, r2
 80005e0:	4662      	mov	r2, ip
 80005e2:	468c      	mov	ip, r1
 80005e4:	4619      	mov	r1, r3
 80005e6:	4663      	mov	r3, ip
 80005e8:	e000      	b.n	80005ec <__aeabi_cdcmpeq>
 80005ea:	bf00      	nop

080005ec <__aeabi_cdcmpeq>:
 80005ec:	b501      	push	{r0, lr}
 80005ee:	f7ff ffb7 	bl	8000560 <__cmpdf2>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	bf48      	it	mi
 80005f6:	f110 0f00 	cmnmi.w	r0, #0
 80005fa:	bd01      	pop	{r0, pc}

080005fc <__aeabi_dcmpeq>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff fff4 	bl	80005ec <__aeabi_cdcmpeq>
 8000604:	bf0c      	ite	eq
 8000606:	2001      	moveq	r0, #1
 8000608:	2000      	movne	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_dcmplt>:
 8000610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000614:	f7ff ffea 	bl	80005ec <__aeabi_cdcmpeq>
 8000618:	bf34      	ite	cc
 800061a:	2001      	movcc	r0, #1
 800061c:	2000      	movcs	r0, #0
 800061e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000622:	bf00      	nop

08000624 <__aeabi_dcmple>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff ffe0 	bl	80005ec <__aeabi_cdcmpeq>
 800062c:	bf94      	ite	ls
 800062e:	2001      	movls	r0, #1
 8000630:	2000      	movhi	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmpge>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffce 	bl	80005dc <__aeabi_cdrcmple>
 8000640:	bf94      	ite	ls
 8000642:	2001      	movls	r0, #1
 8000644:	2000      	movhi	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmpgt>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffc4 	bl	80005dc <__aeabi_cdrcmple>
 8000654:	bf34      	ite	cc
 8000656:	2001      	movcc	r0, #1
 8000658:	2000      	movcs	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_uldivmod>:
 8000660:	b953      	cbnz	r3, 8000678 <__aeabi_uldivmod+0x18>
 8000662:	b94a      	cbnz	r2, 8000678 <__aeabi_uldivmod+0x18>
 8000664:	2900      	cmp	r1, #0
 8000666:	bf08      	it	eq
 8000668:	2800      	cmpeq	r0, #0
 800066a:	bf1c      	itt	ne
 800066c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000670:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000674:	f000 b974 	b.w	8000960 <__aeabi_idiv0>
 8000678:	f1ad 0c08 	sub.w	ip, sp, #8
 800067c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000680:	f000 f806 	bl	8000690 <__udivmoddi4>
 8000684:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000688:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800068c:	b004      	add	sp, #16
 800068e:	4770      	bx	lr

08000690 <__udivmoddi4>:
 8000690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000694:	9d08      	ldr	r5, [sp, #32]
 8000696:	4604      	mov	r4, r0
 8000698:	468e      	mov	lr, r1
 800069a:	2b00      	cmp	r3, #0
 800069c:	d14d      	bne.n	800073a <__udivmoddi4+0xaa>
 800069e:	428a      	cmp	r2, r1
 80006a0:	4694      	mov	ip, r2
 80006a2:	d969      	bls.n	8000778 <__udivmoddi4+0xe8>
 80006a4:	fab2 f282 	clz	r2, r2
 80006a8:	b152      	cbz	r2, 80006c0 <__udivmoddi4+0x30>
 80006aa:	fa01 f302 	lsl.w	r3, r1, r2
 80006ae:	f1c2 0120 	rsb	r1, r2, #32
 80006b2:	fa20 f101 	lsr.w	r1, r0, r1
 80006b6:	fa0c fc02 	lsl.w	ip, ip, r2
 80006ba:	ea41 0e03 	orr.w	lr, r1, r3
 80006be:	4094      	lsls	r4, r2
 80006c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006c4:	0c21      	lsrs	r1, r4, #16
 80006c6:	fbbe f6f8 	udiv	r6, lr, r8
 80006ca:	fa1f f78c 	uxth.w	r7, ip
 80006ce:	fb08 e316 	mls	r3, r8, r6, lr
 80006d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006d6:	fb06 f107 	mul.w	r1, r6, r7
 80006da:	4299      	cmp	r1, r3
 80006dc:	d90a      	bls.n	80006f4 <__udivmoddi4+0x64>
 80006de:	eb1c 0303 	adds.w	r3, ip, r3
 80006e2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80006e6:	f080 811f 	bcs.w	8000928 <__udivmoddi4+0x298>
 80006ea:	4299      	cmp	r1, r3
 80006ec:	f240 811c 	bls.w	8000928 <__udivmoddi4+0x298>
 80006f0:	3e02      	subs	r6, #2
 80006f2:	4463      	add	r3, ip
 80006f4:	1a5b      	subs	r3, r3, r1
 80006f6:	b2a4      	uxth	r4, r4
 80006f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80006fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000700:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000704:	fb00 f707 	mul.w	r7, r0, r7
 8000708:	42a7      	cmp	r7, r4
 800070a:	d90a      	bls.n	8000722 <__udivmoddi4+0x92>
 800070c:	eb1c 0404 	adds.w	r4, ip, r4
 8000710:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000714:	f080 810a 	bcs.w	800092c <__udivmoddi4+0x29c>
 8000718:	42a7      	cmp	r7, r4
 800071a:	f240 8107 	bls.w	800092c <__udivmoddi4+0x29c>
 800071e:	4464      	add	r4, ip
 8000720:	3802      	subs	r0, #2
 8000722:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000726:	1be4      	subs	r4, r4, r7
 8000728:	2600      	movs	r6, #0
 800072a:	b11d      	cbz	r5, 8000734 <__udivmoddi4+0xa4>
 800072c:	40d4      	lsrs	r4, r2
 800072e:	2300      	movs	r3, #0
 8000730:	e9c5 4300 	strd	r4, r3, [r5]
 8000734:	4631      	mov	r1, r6
 8000736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073a:	428b      	cmp	r3, r1
 800073c:	d909      	bls.n	8000752 <__udivmoddi4+0xc2>
 800073e:	2d00      	cmp	r5, #0
 8000740:	f000 80ef 	beq.w	8000922 <__udivmoddi4+0x292>
 8000744:	2600      	movs	r6, #0
 8000746:	e9c5 0100 	strd	r0, r1, [r5]
 800074a:	4630      	mov	r0, r6
 800074c:	4631      	mov	r1, r6
 800074e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000752:	fab3 f683 	clz	r6, r3
 8000756:	2e00      	cmp	r6, #0
 8000758:	d14a      	bne.n	80007f0 <__udivmoddi4+0x160>
 800075a:	428b      	cmp	r3, r1
 800075c:	d302      	bcc.n	8000764 <__udivmoddi4+0xd4>
 800075e:	4282      	cmp	r2, r0
 8000760:	f200 80f9 	bhi.w	8000956 <__udivmoddi4+0x2c6>
 8000764:	1a84      	subs	r4, r0, r2
 8000766:	eb61 0303 	sbc.w	r3, r1, r3
 800076a:	2001      	movs	r0, #1
 800076c:	469e      	mov	lr, r3
 800076e:	2d00      	cmp	r5, #0
 8000770:	d0e0      	beq.n	8000734 <__udivmoddi4+0xa4>
 8000772:	e9c5 4e00 	strd	r4, lr, [r5]
 8000776:	e7dd      	b.n	8000734 <__udivmoddi4+0xa4>
 8000778:	b902      	cbnz	r2, 800077c <__udivmoddi4+0xec>
 800077a:	deff      	udf	#255	; 0xff
 800077c:	fab2 f282 	clz	r2, r2
 8000780:	2a00      	cmp	r2, #0
 8000782:	f040 8092 	bne.w	80008aa <__udivmoddi4+0x21a>
 8000786:	eba1 010c 	sub.w	r1, r1, ip
 800078a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800078e:	fa1f fe8c 	uxth.w	lr, ip
 8000792:	2601      	movs	r6, #1
 8000794:	0c20      	lsrs	r0, r4, #16
 8000796:	fbb1 f3f7 	udiv	r3, r1, r7
 800079a:	fb07 1113 	mls	r1, r7, r3, r1
 800079e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007a2:	fb0e f003 	mul.w	r0, lr, r3
 80007a6:	4288      	cmp	r0, r1
 80007a8:	d908      	bls.n	80007bc <__udivmoddi4+0x12c>
 80007aa:	eb1c 0101 	adds.w	r1, ip, r1
 80007ae:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80007b2:	d202      	bcs.n	80007ba <__udivmoddi4+0x12a>
 80007b4:	4288      	cmp	r0, r1
 80007b6:	f200 80cb 	bhi.w	8000950 <__udivmoddi4+0x2c0>
 80007ba:	4643      	mov	r3, r8
 80007bc:	1a09      	subs	r1, r1, r0
 80007be:	b2a4      	uxth	r4, r4
 80007c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80007c4:	fb07 1110 	mls	r1, r7, r0, r1
 80007c8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007cc:	fb0e fe00 	mul.w	lr, lr, r0
 80007d0:	45a6      	cmp	lr, r4
 80007d2:	d908      	bls.n	80007e6 <__udivmoddi4+0x156>
 80007d4:	eb1c 0404 	adds.w	r4, ip, r4
 80007d8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80007dc:	d202      	bcs.n	80007e4 <__udivmoddi4+0x154>
 80007de:	45a6      	cmp	lr, r4
 80007e0:	f200 80bb 	bhi.w	800095a <__udivmoddi4+0x2ca>
 80007e4:	4608      	mov	r0, r1
 80007e6:	eba4 040e 	sub.w	r4, r4, lr
 80007ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007ee:	e79c      	b.n	800072a <__udivmoddi4+0x9a>
 80007f0:	f1c6 0720 	rsb	r7, r6, #32
 80007f4:	40b3      	lsls	r3, r6
 80007f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80007fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80007fe:	fa20 f407 	lsr.w	r4, r0, r7
 8000802:	fa01 f306 	lsl.w	r3, r1, r6
 8000806:	431c      	orrs	r4, r3
 8000808:	40f9      	lsrs	r1, r7
 800080a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800080e:	fa00 f306 	lsl.w	r3, r0, r6
 8000812:	fbb1 f8f9 	udiv	r8, r1, r9
 8000816:	0c20      	lsrs	r0, r4, #16
 8000818:	fa1f fe8c 	uxth.w	lr, ip
 800081c:	fb09 1118 	mls	r1, r9, r8, r1
 8000820:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000824:	fb08 f00e 	mul.w	r0, r8, lr
 8000828:	4288      	cmp	r0, r1
 800082a:	fa02 f206 	lsl.w	r2, r2, r6
 800082e:	d90b      	bls.n	8000848 <__udivmoddi4+0x1b8>
 8000830:	eb1c 0101 	adds.w	r1, ip, r1
 8000834:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000838:	f080 8088 	bcs.w	800094c <__udivmoddi4+0x2bc>
 800083c:	4288      	cmp	r0, r1
 800083e:	f240 8085 	bls.w	800094c <__udivmoddi4+0x2bc>
 8000842:	f1a8 0802 	sub.w	r8, r8, #2
 8000846:	4461      	add	r1, ip
 8000848:	1a09      	subs	r1, r1, r0
 800084a:	b2a4      	uxth	r4, r4
 800084c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000850:	fb09 1110 	mls	r1, r9, r0, r1
 8000854:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000858:	fb00 fe0e 	mul.w	lr, r0, lr
 800085c:	458e      	cmp	lr, r1
 800085e:	d908      	bls.n	8000872 <__udivmoddi4+0x1e2>
 8000860:	eb1c 0101 	adds.w	r1, ip, r1
 8000864:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000868:	d26c      	bcs.n	8000944 <__udivmoddi4+0x2b4>
 800086a:	458e      	cmp	lr, r1
 800086c:	d96a      	bls.n	8000944 <__udivmoddi4+0x2b4>
 800086e:	3802      	subs	r0, #2
 8000870:	4461      	add	r1, ip
 8000872:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000876:	fba0 9402 	umull	r9, r4, r0, r2
 800087a:	eba1 010e 	sub.w	r1, r1, lr
 800087e:	42a1      	cmp	r1, r4
 8000880:	46c8      	mov	r8, r9
 8000882:	46a6      	mov	lr, r4
 8000884:	d356      	bcc.n	8000934 <__udivmoddi4+0x2a4>
 8000886:	d053      	beq.n	8000930 <__udivmoddi4+0x2a0>
 8000888:	b15d      	cbz	r5, 80008a2 <__udivmoddi4+0x212>
 800088a:	ebb3 0208 	subs.w	r2, r3, r8
 800088e:	eb61 010e 	sbc.w	r1, r1, lr
 8000892:	fa01 f707 	lsl.w	r7, r1, r7
 8000896:	fa22 f306 	lsr.w	r3, r2, r6
 800089a:	40f1      	lsrs	r1, r6
 800089c:	431f      	orrs	r7, r3
 800089e:	e9c5 7100 	strd	r7, r1, [r5]
 80008a2:	2600      	movs	r6, #0
 80008a4:	4631      	mov	r1, r6
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	f1c2 0320 	rsb	r3, r2, #32
 80008ae:	40d8      	lsrs	r0, r3
 80008b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008b4:	fa21 f303 	lsr.w	r3, r1, r3
 80008b8:	4091      	lsls	r1, r2
 80008ba:	4301      	orrs	r1, r0
 80008bc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c0:	fa1f fe8c 	uxth.w	lr, ip
 80008c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80008c8:	fb07 3610 	mls	r6, r7, r0, r3
 80008cc:	0c0b      	lsrs	r3, r1, #16
 80008ce:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008d2:	fb00 f60e 	mul.w	r6, r0, lr
 80008d6:	429e      	cmp	r6, r3
 80008d8:	fa04 f402 	lsl.w	r4, r4, r2
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x260>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80008e6:	d22f      	bcs.n	8000948 <__udivmoddi4+0x2b8>
 80008e8:	429e      	cmp	r6, r3
 80008ea:	d92d      	bls.n	8000948 <__udivmoddi4+0x2b8>
 80008ec:	3802      	subs	r0, #2
 80008ee:	4463      	add	r3, ip
 80008f0:	1b9b      	subs	r3, r3, r6
 80008f2:	b289      	uxth	r1, r1
 80008f4:	fbb3 f6f7 	udiv	r6, r3, r7
 80008f8:	fb07 3316 	mls	r3, r7, r6, r3
 80008fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000900:	fb06 f30e 	mul.w	r3, r6, lr
 8000904:	428b      	cmp	r3, r1
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x28a>
 8000908:	eb1c 0101 	adds.w	r1, ip, r1
 800090c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000910:	d216      	bcs.n	8000940 <__udivmoddi4+0x2b0>
 8000912:	428b      	cmp	r3, r1
 8000914:	d914      	bls.n	8000940 <__udivmoddi4+0x2b0>
 8000916:	3e02      	subs	r6, #2
 8000918:	4461      	add	r1, ip
 800091a:	1ac9      	subs	r1, r1, r3
 800091c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000920:	e738      	b.n	8000794 <__udivmoddi4+0x104>
 8000922:	462e      	mov	r6, r5
 8000924:	4628      	mov	r0, r5
 8000926:	e705      	b.n	8000734 <__udivmoddi4+0xa4>
 8000928:	4606      	mov	r6, r0
 800092a:	e6e3      	b.n	80006f4 <__udivmoddi4+0x64>
 800092c:	4618      	mov	r0, r3
 800092e:	e6f8      	b.n	8000722 <__udivmoddi4+0x92>
 8000930:	454b      	cmp	r3, r9
 8000932:	d2a9      	bcs.n	8000888 <__udivmoddi4+0x1f8>
 8000934:	ebb9 0802 	subs.w	r8, r9, r2
 8000938:	eb64 0e0c 	sbc.w	lr, r4, ip
 800093c:	3801      	subs	r0, #1
 800093e:	e7a3      	b.n	8000888 <__udivmoddi4+0x1f8>
 8000940:	4646      	mov	r6, r8
 8000942:	e7ea      	b.n	800091a <__udivmoddi4+0x28a>
 8000944:	4620      	mov	r0, r4
 8000946:	e794      	b.n	8000872 <__udivmoddi4+0x1e2>
 8000948:	4640      	mov	r0, r8
 800094a:	e7d1      	b.n	80008f0 <__udivmoddi4+0x260>
 800094c:	46d0      	mov	r8, sl
 800094e:	e77b      	b.n	8000848 <__udivmoddi4+0x1b8>
 8000950:	3b02      	subs	r3, #2
 8000952:	4461      	add	r1, ip
 8000954:	e732      	b.n	80007bc <__udivmoddi4+0x12c>
 8000956:	4630      	mov	r0, r6
 8000958:	e709      	b.n	800076e <__udivmoddi4+0xde>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	e742      	b.n	80007e6 <__udivmoddi4+0x156>

08000960 <__aeabi_idiv0>:
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop

08000964 <read_data>:
save_data(Address,data);
}

uint8_t read_data(uint32_t Address){

	__IO uint8_t read_data = *(__IO uint32_t *)Address;
 8000964:	6803      	ldr	r3, [r0, #0]
uint8_t read_data(uint32_t Address){
 8000966:	b082      	sub	sp, #8
	__IO uint8_t read_data = *(__IO uint32_t *)Address;
 8000968:	b2db      	uxtb	r3, r3
 800096a:	f88d 3007 	strb.w	r3, [sp, #7]
	return (uint8_t)read_data;
 800096e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8000972:	b002      	add	sp, #8
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <Write_coin>:
	HAL_FLASH_Lock();


}

void Write_coin(uint8_t *data_p, int broj){
 8000978:	b570      	push	{r4, r5, r6, lr}
 800097a:	4e0f      	ldr	r6, [pc, #60]	; (80009b8 <Write_coin+0x40>)
int i;
uint32_t flash_address = FLASH_MEMORY_BEGIN + 1 + (broj * sizestruct);
 800097c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000980:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8000984:	1a36      	subs	r6, r6, r0
void Write_coin(uint8_t *data_p, int broj){
 8000986:	b082      	sub	sp, #8
uint32_t flash_address = FLASH_MEMORY_BEGIN + 1 + (broj * sizestruct);
 8000988:	4604      	mov	r4, r0
 800098a:	f100 051b 	add.w	r5, r0, #27
 800098e:	440e      	add	r6, r1
 8000990:	19a1      	adds	r1, r4, r6

  for ( i = 0; i < sizestruct; i++, data_p++, flash_address++ )
	 save_data(flash_address, *data_p);
 8000992:	f814 2b01 	ldrb.w	r2, [r4], #1
 8000996:	9101      	str	r1, [sp, #4]
 8000998:	9200      	str	r2, [sp, #0]
    HAL_FLASH_Unlock();
 800099a:	f001 fd3b 	bl	8002414 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,Address,(uint8_t)data);
 800099e:	2300      	movs	r3, #0
 80009a0:	9a00      	ldr	r2, [sp, #0]
 80009a2:	9901      	ldr	r1, [sp, #4]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 fc93 	bl	80022d0 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80009aa:	f001 fd47 	bl	800243c <HAL_FLASH_Lock>
  for ( i = 0; i < sizestruct; i++, data_p++, flash_address++ )
 80009ae:	42ac      	cmp	r4, r5
 80009b0:	d1ee      	bne.n	8000990 <Write_coin+0x18>

}
 80009b2:	b002      	add	sp, #8
 80009b4:	bd70      	pop	{r4, r5, r6, pc}
 80009b6:	bf00      	nop
 80009b8:	08060001 	.word	0x08060001

080009bc <Read_coin>:

void Read_coin(uint8_t *data_p, int broj){
 80009bc:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <Read_coin+0x30>)
	
int i;
uint32_t flash_address = FLASH_MEMORY_BEGIN + 1 + (broj * sizestruct);
 80009be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80009c2:	eb01 0cc1 	add.w	ip, r1, r1, lsl #3
 80009c6:	1a12      	subs	r2, r2, r0
 80009c8:	4603      	mov	r3, r0
 80009ca:	f100 011b 	add.w	r1, r0, #27
void Read_coin(uint8_t *data_p, int broj){
 80009ce:	b082      	sub	sp, #8
 80009d0:	eb02 000c 	add.w	r0, r2, ip
	__IO uint8_t read_data = *(__IO uint32_t *)Address;
 80009d4:	581a      	ldr	r2, [r3, r0]
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	f88d 2007 	strb.w	r2, [sp, #7]
	return (uint8_t)read_data;
 80009dc:	f89d 2007 	ldrb.w	r2, [sp, #7]

 for ( i = 0; i < sizestruct ; i++, data_p++, flash_address++ )
      *data_p = read_data(flash_address);
 80009e0:	f803 2b01 	strb.w	r2, [r3], #1
 for ( i = 0; i < sizestruct ; i++, data_p++, flash_address++ )
 80009e4:	428b      	cmp	r3, r1
 80009e6:	d1f5      	bne.n	80009d4 <Read_coin+0x18>

}
 80009e8:	b002      	add	sp, #8
 80009ea:	4770      	bx	lr
 80009ec:	08060001 	.word	0x08060001

080009f0 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 80009f0:	b570      	push	{r4, r5, r6, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009f2:	4c39      	ldr	r4, [pc, #228]	; (8000ad8 <lcd_init+0xe8>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80009f4:	4e39      	ldr	r6, [pc, #228]	; (8000adc <lcd_init+0xec>)
{
 80009f6:	b084      	sub	sp, #16
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009f8:	2564      	movs	r5, #100	; 0x64
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80009fa:	2032      	movs	r0, #50	; 0x32
 80009fc:	f001 fa2a 	bl	8001e54 <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a00:	aa03      	add	r2, sp, #12
 8000a02:	2304      	movs	r3, #4
 8000a04:	214e      	movs	r1, #78	; 0x4e
 8000a06:	9500      	str	r5, [sp, #0]
 8000a08:	4620      	mov	r0, r4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000a0a:	9603      	str	r6, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a0c:	f001 feea 	bl	80027e4 <HAL_I2C_Master_Transmit>
	lcd_send_cmd (0x30);
	HAL_Delay(5);  // wait for >4.1ms
 8000a10:	2005      	movs	r0, #5
 8000a12:	f001 fa1f 	bl	8001e54 <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a16:	aa03      	add	r2, sp, #12
 8000a18:	2304      	movs	r3, #4
 8000a1a:	214e      	movs	r1, #78	; 0x4e
 8000a1c:	9500      	str	r5, [sp, #0]
 8000a1e:	4620      	mov	r0, r4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000a20:	9603      	str	r6, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a22:	f001 fedf 	bl	80027e4 <HAL_I2C_Master_Transmit>
	lcd_send_cmd (0x30);
	HAL_Delay(1);  // wait for >100us
 8000a26:	2001      	movs	r0, #1
 8000a28:	f001 fa14 	bl	8001e54 <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a2c:	aa03      	add	r2, sp, #12
 8000a2e:	2304      	movs	r3, #4
 8000a30:	214e      	movs	r1, #78	; 0x4e
 8000a32:	9500      	str	r5, [sp, #0]
 8000a34:	4620      	mov	r0, r4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000a36:	9603      	str	r6, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a38:	f001 fed4 	bl	80027e4 <HAL_I2C_Master_Transmit>
	lcd_send_cmd (0x30);
	HAL_Delay(10);
 8000a3c:	200a      	movs	r0, #10
 8000a3e:	f001 fa09 	bl	8001e54 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000a42:	4927      	ldr	r1, [pc, #156]	; (8000ae0 <lcd_init+0xf0>)
 8000a44:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a46:	aa03      	add	r2, sp, #12
 8000a48:	2304      	movs	r3, #4
 8000a4a:	214e      	movs	r1, #78	; 0x4e
 8000a4c:	9500      	str	r5, [sp, #0]
 8000a4e:	4620      	mov	r0, r4
 8000a50:	f001 fec8 	bl	80027e4 <HAL_I2C_Master_Transmit>
	lcd_send_cmd (0x20);  // 4bit mode
	HAL_Delay(10);
 8000a54:	200a      	movs	r0, #10
 8000a56:	f001 f9fd 	bl	8001e54 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000a5a:	4922      	ldr	r1, [pc, #136]	; (8000ae4 <lcd_init+0xf4>)
 8000a5c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a5e:	aa03      	add	r2, sp, #12
 8000a60:	2304      	movs	r3, #4
 8000a62:	214e      	movs	r1, #78	; 0x4e
 8000a64:	9500      	str	r5, [sp, #0]
 8000a66:	4620      	mov	r0, r4
 8000a68:	f001 febc 	bl	80027e4 <HAL_I2C_Master_Transmit>

  // display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
	HAL_Delay(1);
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f001 f9f1 	bl	8001e54 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000a72:	491d      	ldr	r1, [pc, #116]	; (8000ae8 <lcd_init+0xf8>)
 8000a74:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a76:	aa03      	add	r2, sp, #12
 8000a78:	2304      	movs	r3, #4
 8000a7a:	214e      	movs	r1, #78	; 0x4e
 8000a7c:	9500      	str	r5, [sp, #0]
 8000a7e:	4620      	mov	r0, r4
 8000a80:	f001 feb0 	bl	80027e4 <HAL_I2C_Master_Transmit>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
	HAL_Delay(1);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f001 f9e5 	bl	8001e54 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000a8a:	4918      	ldr	r1, [pc, #96]	; (8000aec <lcd_init+0xfc>)
 8000a8c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a8e:	aa03      	add	r2, sp, #12
 8000a90:	2304      	movs	r3, #4
 8000a92:	214e      	movs	r1, #78	; 0x4e
 8000a94:	9500      	str	r5, [sp, #0]
 8000a96:	4620      	mov	r0, r4
 8000a98:	f001 fea4 	bl	80027e4 <HAL_I2C_Master_Transmit>
	lcd_send_cmd (0x01);  // clear display
	HAL_Delay(1);
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f001 f9d9 	bl	8001e54 <HAL_Delay>
	HAL_Delay(1);
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f001 f9d6 	bl	8001e54 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000aa8:	4911      	ldr	r1, [pc, #68]	; (8000af0 <lcd_init+0x100>)
 8000aaa:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000aac:	aa03      	add	r2, sp, #12
 8000aae:	2304      	movs	r3, #4
 8000ab0:	214e      	movs	r1, #78	; 0x4e
 8000ab2:	9500      	str	r5, [sp, #0]
 8000ab4:	4620      	mov	r0, r4
 8000ab6:	f001 fe95 	bl	80027e4 <HAL_I2C_Master_Transmit>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	HAL_Delay(1);
 8000aba:	2001      	movs	r0, #1
 8000abc:	f001 f9ca 	bl	8001e54 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000ac0:	4e0c      	ldr	r6, [pc, #48]	; (8000af4 <lcd_init+0x104>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ac2:	9500      	str	r5, [sp, #0]
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	aa03      	add	r2, sp, #12
 8000ac8:	214e      	movs	r1, #78	; 0x4e
 8000aca:	4620      	mov	r0, r4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000acc:	9603      	str	r6, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ace:	f001 fe89 	bl	80027e4 <HAL_I2C_Master_Transmit>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}
 8000ad2:	b004      	add	sp, #16
 8000ad4:	bd70      	pop	{r4, r5, r6, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000148 	.word	0x20000148
 8000adc:	080c383c 	.word	0x080c383c
 8000ae0:	080c282c 	.word	0x080c282c
 8000ae4:	888c282c 	.word	0x888c282c
 8000ae8:	888c080c 	.word	0x888c080c
 8000aec:	181c080c 	.word	0x181c080c
 8000af0:	686c080c 	.word	0x686c080c
 8000af4:	c8cc080c 	.word	0xc8cc080c

08000af8 <display_total_init>:
void lcd_send_string (char *str)
{
	while (*str) lcd_send_data (*str++);
}

void display_total_init(void){
 8000af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000afc:	b084      	sub	sp, #16
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000afe:	4928      	ldr	r1, [pc, #160]	; (8000ba0 <display_total_init+0xa8>)
 8000b00:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b02:	2564      	movs	r5, #100	; 0x64
 8000b04:	4827      	ldr	r0, [pc, #156]	; (8000ba4 <display_total_init+0xac>)
 8000b06:	9500      	str	r5, [sp, #0]
 8000b08:	2304      	movs	r3, #4
 8000b0a:	aa03      	add	r2, sp, #12
 8000b0c:	214e      	movs	r1, #78	; 0x4e
 8000b0e:	f001 fe69 	bl	80027e4 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000b12:	4f25      	ldr	r7, [pc, #148]	; (8000ba8 <display_total_init+0xb0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b14:	4e23      	ldr	r6, [pc, #140]	; (8000ba4 <display_total_init+0xac>)
 8000b16:	2446      	movs	r4, #70	; 0x46
 8000b18:	9500      	str	r5, [sp, #0]
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	aa03      	add	r2, sp, #12
 8000b1e:	214e      	movs	r1, #78	; 0x4e
 8000b20:	4630      	mov	r0, r6
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000b22:	9703      	str	r7, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b24:	f001 fe5e 	bl	80027e4 <HAL_I2C_Master_Transmit>
	for (int i=0; i<70; i++)
 8000b28:	3c01      	subs	r4, #1
 8000b2a:	d1f5      	bne.n	8000b18 <display_total_init+0x20>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000b2c:	491c      	ldr	r1, [pc, #112]	; (8000ba0 <display_total_init+0xa8>)
 8000b2e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b30:	2304      	movs	r3, #4
 8000b32:	481c      	ldr	r0, [pc, #112]	; (8000ba4 <display_total_init+0xac>)
 8000b34:	9500      	str	r5, [sp, #0]
 8000b36:	aa03      	add	r2, sp, #12
 8000b38:	214e      	movs	r1, #78	; 0x4e
 8000b3a:	4e1c      	ldr	r6, [pc, #112]	; (8000bac <display_total_init+0xb4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b3c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8000ba4 <display_total_init+0xac>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b40:	f001 fe50 	bl	80027e4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b44:	2764      	movs	r7, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8000b46:	2354      	movs	r3, #84	; 0x54
	data_l = ((data<<4)&0xf0);
 8000b48:	011a      	lsls	r2, r3, #4
 8000b4a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8000b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000b50:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000b54:	f042 0c0d 	orr.w	ip, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000b58:	f043 0409 	orr.w	r4, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000b5c:	f042 0509 	orr.w	r5, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b60:	2304      	movs	r3, #4
 8000b62:	9700      	str	r7, [sp, #0]
 8000b64:	aa03      	add	r2, sp, #12
 8000b66:	214e      	movs	r1, #78	; 0x4e
 8000b68:	4640      	mov	r0, r8
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000b6a:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000b6e:	f88d 400d 	strb.w	r4, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000b72:	f88d c00e 	strb.w	ip, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000b76:	f88d 500f 	strb.w	r5, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b7a:	f001 fe33 	bl	80027e4 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8000b7e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1e0      	bne.n	8000b48 <display_total_init+0x50>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000b86:	4c0a      	ldr	r4, [pc, #40]	; (8000bb0 <display_total_init+0xb8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b88:	9700      	str	r7, [sp, #0]
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	aa03      	add	r2, sp, #12
 8000b8e:	214e      	movs	r1, #78	; 0x4e
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <display_total_init+0xac>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000b92:	9403      	str	r4, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b94:	f001 fe26 	bl	80027e4 <HAL_I2C_Master_Transmit>
	lcd_clear();
	lcd_put_cur(0, 0);
	lcd_send_string("TOTAL:");
	lcd_put_cur(1, 7);
}
 8000b98:	b004      	add	sp, #16
 8000b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b9e:	bf00      	nop
 8000ba0:	080c888c 	.word	0x080c888c
 8000ba4:	20000148 	.word	0x20000148
 8000ba8:	090d292d 	.word	0x090d292d
 8000bac:	080035cc 	.word	0x080035cc
 8000bb0:	787cc8cc 	.word	0x787cc8cc

08000bb4 <display_total_update>:
void display_total_update(float total){
 8000bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bb8:	ed2d 8b02 	vpush	{d8}
 8000bbc:	b087      	sub	sp, #28
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000bbe:	4b42      	ldr	r3, [pc, #264]	; (8000cc8 <display_total_update+0x114>)
 8000bc0:	9303      	str	r3, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000bc2:	2564      	movs	r5, #100	; 0x64
 8000bc4:	aa03      	add	r2, sp, #12
 8000bc6:	214e      	movs	r1, #78	; 0x4e
 8000bc8:	2304      	movs	r3, #4
 8000bca:	4840      	ldr	r0, [pc, #256]	; (8000ccc <display_total_update+0x118>)
 8000bcc:	9500      	str	r5, [sp, #0]
void display_total_update(float total){
 8000bce:	eeb0 8a40 	vmov.f32	s16, s0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000bd2:	f001 fe07 	bl	80027e4 <HAL_I2C_Master_Transmit>
	lcd_put_cur(0, 7);
	int tot_int = total*100;
 8000bd6:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8000cd0 <display_total_update+0x11c>

	char tot_s[] = "00.00 EUR";
	tot_s[0] = tot_int%10000/1000 +48;
 8000bda:	4b3e      	ldr	r3, [pc, #248]	; (8000cd4 <display_total_update+0x120>)
 8000bdc:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8000ce0 <display_total_update+0x12c>
	tot_s[1] = tot_int%1000/100 +48;
 8000be0:	4e3d      	ldr	r6, [pc, #244]	; (8000cd8 <display_total_update+0x124>)
	tot_s[2] = '.';
	tot_s[3] = tot_int%100/10 +48;
 8000be2:	f8df e100 	ldr.w	lr, [pc, #256]	; 8000ce4 <display_total_update+0x130>
	char tot_s[] = "00.00 EUR";
 8000be6:	493d      	ldr	r1, [pc, #244]	; (8000cdc <display_total_update+0x128>)
	int tot_int = total*100;
 8000be8:	ee28 0a00 	vmul.f32	s0, s16, s0
	tot_s[0] = tot_int%10000/1000 +48;
 8000bec:	f242 7c10 	movw	ip, #10000	; 0x2710
	int tot_int = total*100;
 8000bf0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	char tot_s[] = "00.00 EUR";
 8000bf4:	af03      	add	r7, sp, #12
	int tot_int = total*100;
 8000bf6:	ee17 2a90 	vmov	r2, s15
	tot_s[0] = tot_int%10000/1000 +48;
 8000bfa:	fb83 0302 	smull	r0, r3, r3, r2
 8000bfe:	17d0      	asrs	r0, r2, #31
 8000c00:	ebc0 3323 	rsb	r3, r0, r3, asr #12
 8000c04:	fb0c 2313 	mls	r3, ip, r3, r2
	tot_s[1] = tot_int%1000/100 +48;
 8000c08:	fb88 9c02 	smull	r9, ip, r8, r2
	tot_s[0] = tot_int%10000/1000 +48;
 8000c0c:	fb88 9803 	smull	r9, r8, r8, r3
 8000c10:	17db      	asrs	r3, r3, #31
 8000c12:	ebc3 13a8 	rsb	r3, r3, r8, asr #6
	tot_s[1] = tot_int%1000/100 +48;
 8000c16:	ebc0 1cac 	rsb	ip, r0, ip, asr #6
	tot_s[3] = tot_int%100/10 +48;
 8000c1a:	fb86 8902 	smull	r8, r9, r6, r2
	tot_s[1] = tot_int%1000/100 +48;
 8000c1e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8000c22:	fb08 2c1c 	mls	ip, r8, ip, r2
 8000c26:	fb86 680c 	smull	r6, r8, r6, ip
 8000c2a:	ea4f 7cec 	mov.w	ip, ip, asr #31
 8000c2e:	ebcc 1868 	rsb	r8, ip, r8, asr #5
	tot_s[4] = tot_int%10 +48;
 8000c32:	fb8e 6c02 	smull	r6, ip, lr, r2
	tot_s[3] = tot_int%100/10 +48;
 8000c36:	ebc0 1969 	rsb	r9, r0, r9, asr #5
	tot_s[4] = tot_int%10 +48;
 8000c3a:	ebc0 00ac 	rsb	r0, r0, ip, asr #2
 8000c3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	tot_s[3] = tot_int%100/10 +48;
 8000c42:	fb05 2919 	mls	r9, r5, r9, r2
	tot_s[4] = tot_int%10 +48;
 8000c46:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
 8000c4a:	f102 0c30 	add.w	ip, r2, #48	; 0x30
	char tot_s[] = "00.00 EUR";
 8000c4e:	c907      	ldmia	r1, {r0, r1, r2}
	tot_s[3] = tot_int%100/10 +48;
 8000c50:	fb8e 6e09 	smull	r6, lr, lr, r9
	tot_s[4] = tot_int%10 +48;
 8000c54:	463c      	mov	r4, r7
	tot_s[3] = tot_int%100/10 +48;
 8000c56:	ea4f 79e9 	mov.w	r9, r9, asr #31
	char tot_s[] = "00.00 EUR";
 8000c5a:	c703      	stmia	r7!, {r0, r1}
	tot_s[0] = tot_int%10000/1000 +48;
 8000c5c:	3330      	adds	r3, #48	; 0x30
	tot_s[3] = tot_int%100/10 +48;
 8000c5e:	ebc9 0eae 	rsb	lr, r9, lr, asr #2
	tot_s[0] = tot_int%10000/1000 +48;
 8000c62:	b2db      	uxtb	r3, r3
	tot_s[1] = tot_int%1000/100 +48;
 8000c64:	f108 0830 	add.w	r8, r8, #48	; 0x30
	tot_s[3] = tot_int%100/10 +48;
 8000c68:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c6c:	4e17      	ldr	r6, [pc, #92]	; (8000ccc <display_total_update+0x118>)
	char tot_s[] = "00.00 EUR";
 8000c6e:	803a      	strh	r2, [r7, #0]
	tot_s[1] = tot_int%1000/100 +48;
 8000c70:	f88d 800d 	strb.w	r8, [sp, #13]
	tot_s[3] = tot_int%100/10 +48;
 8000c74:	f88d e00f 	strb.w	lr, [sp, #15]
	tot_s[4] = tot_int%10 +48;
 8000c78:	f88d c010 	strb.w	ip, [sp, #16]
	tot_s[0] = tot_int%10000/1000 +48;
 8000c7c:	f88d 300c 	strb.w	r3, [sp, #12]
	data_l = ((data<<4)&0xf0);
 8000c80:	011a      	lsls	r2, r3, #4
 8000c82:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8000c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000c88:	f043 0e09 	orr.w	lr, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000c8c:	f042 0c09 	orr.w	ip, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000c90:	f043 080d 	orr.w	r8, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000c94:	f042 070d 	orr.w	r7, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c98:	2304      	movs	r3, #4
 8000c9a:	9500      	str	r5, [sp, #0]
 8000c9c:	aa02      	add	r2, sp, #8
 8000c9e:	214e      	movs	r1, #78	; 0x4e
 8000ca0:	4630      	mov	r0, r6
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000ca2:	f88d 8008 	strb.w	r8, [sp, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000ca6:	f88d e009 	strb.w	lr, [sp, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000caa:	f88d 700a 	strb.w	r7, [sp, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000cae:	f88d c00b 	strb.w	ip, [sp, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000cb2:	f001 fd97 	bl	80027e4 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8000cb6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1e0      	bne.n	8000c80 <display_total_update+0xcc>

	lcd_send_string(tot_s);
}
 8000cbe:	b007      	add	sp, #28
 8000cc0:	ecbd 8b02 	vpop	{d8}
 8000cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cc8:	787c888c 	.word	0x787c888c
 8000ccc:	20000148 	.word	0x20000148
 8000cd0:	42c80000 	.word	0x42c80000
 8000cd4:	68db8bad 	.word	0x68db8bad
 8000cd8:	51eb851f 	.word	0x51eb851f
 8000cdc:	080035d4 	.word	0x080035d4
 8000ce0:	10624dd3 	.word	0x10624dd3
 8000ce4:	66666667 	.word	0x66666667

08000ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce8:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	2300      	movs	r3, #0
{
 8000cec:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cee:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000cf2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000cfa:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4924      	ldr	r1, [pc, #144]	; (8000d90 <SystemClock_Config+0xa8>)
 8000d00:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d02:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d04:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d06:	4a23      	ldr	r2, [pc, #140]	; (8000d94 <SystemClock_Config+0xac>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d08:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000d0c:	6408      	str	r0, [r1, #64]	; 0x40
 8000d0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000d10:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000d14:	9100      	str	r1, [sp, #0]
 8000d16:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	6811      	ldr	r1, [r2, #0]
 8000d1c:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000d20:	6011      	str	r1, [r2, #0]
 8000d22:	6812      	ldr	r2, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d24:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8000d80 <SystemClock_Config+0x98>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d28:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2c:	2002      	movs	r0, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d32:	2304      	movs	r3, #4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d34:	9201      	str	r2, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d36:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d3a:	22c0      	movs	r2, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d3e:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d42:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d46:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d4a:	9c01      	ldr	r4, [sp, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4c:	f001 fedc 	bl	8002b08 <HAL_RCC_OscConfig>
 8000d50:	b108      	cbz	r0, 8000d56 <SystemClock_Config+0x6e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d52:	b672      	cpsid	i
 8000d54:	e7fe      	b.n	8000d54 <SystemClock_Config+0x6c>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d56:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000d88 <SystemClock_Config+0xa0>
 8000d5a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d5e:	2200      	movs	r2, #0
 8000d60:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d64:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d6a:	2103      	movs	r1, #3
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6c:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d70:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d72:	f002 f8e1 	bl	8002f38 <HAL_RCC_ClockConfig>
 8000d76:	b108      	cbz	r0, 8000d7c <SystemClock_Config+0x94>
 8000d78:	b672      	cpsid	i
 8000d7a:	e7fe      	b.n	8000d7a <SystemClock_Config+0x92>
  {
    Error_Handler();
  }
}
 8000d7c:	b014      	add	sp, #80	; 0x50
 8000d7e:	bd10      	pop	{r4, pc}
 8000d80:	00000001 	.word	0x00000001
 8000d84:	00010000 	.word	0x00010000
 8000d88:	0000000f 	.word	0x0000000f
 8000d8c:	00000002 	.word	0x00000002
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40007000 	.word	0x40007000

08000d98 <main>:
{
 8000d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d9c:	ed2d 8b0a 	vpush	{d8-d12}
 8000da0:	2400      	movs	r4, #0
 8000da2:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8000da4:	f001 f82a 	bl	8001dfc <HAL_Init>
  SystemClock_Config();
 8000da8:	f7ff ff9e 	bl	8000ce8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000db0:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db4:	4bab      	ldr	r3, [pc, #684]	; (8001064 <main+0x2cc>)
 8000db6:	9408      	str	r4, [sp, #32]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000dbc:	48aa      	ldr	r0, [pc, #680]	; (8001068 <main+0x2d0>)
  htim9.Instance = TIM9;
 8000dbe:	4dab      	ldr	r5, [pc, #684]	; (800106c <main+0x2d4>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dc0:	f042 0210 	orr.w	r2, r2, #16
 8000dc4:	631a      	str	r2, [r3, #48]	; 0x30
 8000dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dc8:	f002 0210 	and.w	r2, r2, #16
 8000dcc:	9208      	str	r2, [sp, #32]
 8000dce:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd0:	9409      	str	r4, [sp, #36]	; 0x24
 8000dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000dd8:	631a      	str	r2, [r3, #48]	; 0x30
 8000dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ddc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000de0:	9209      	str	r2, [sp, #36]	; 0x24
 8000de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	940a      	str	r4, [sp, #40]	; 0x28
 8000de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000de8:	f042 0201 	orr.w	r2, r2, #1
 8000dec:	631a      	str	r2, [r3, #48]	; 0x30
 8000dee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000df0:	f002 0201 	and.w	r2, r2, #1
 8000df4:	920a      	str	r2, [sp, #40]	; 0x28
 8000df6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df8:	940b      	str	r4, [sp, #44]	; 0x2c
 8000dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dfc:	f042 0202 	orr.w	r2, r2, #2
 8000e00:	631a      	str	r2, [r3, #48]	; 0x30
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000e08:	2104      	movs	r1, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000e10:	f001 fc10 	bl	8002634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e14:	4894      	ldr	r0, [pc, #592]	; (8001068 <main+0x2d0>)
 8000e16:	4622      	mov	r2, r4
 8000e18:	2108      	movs	r1, #8
 8000e1a:	f001 fc0b 	bl	8002634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e1e:	2204      	movs	r2, #4
 8000e20:	2301      	movs	r3, #1
 8000e22:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e26:	4890      	ldr	r0, [pc, #576]	; (8001068 <main+0x2d0>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e2c:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e2e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e32:	f04f 0800 	mov.w	r8, #0
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e36:	f001 fb0b 	bl	8002450 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e3a:	f04f 0900 	mov.w	r9, #0
 8000e3e:	2208      	movs	r2, #8
 8000e40:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e42:	4889      	ldr	r0, [pc, #548]	; (8001068 <main+0x2d0>)
 8000e44:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e46:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000e4a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e4e:	f001 faff 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e52:	2240      	movs	r2, #64	; 0x40
 8000e54:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e58:	4883      	ldr	r0, [pc, #524]	; (8001068 <main+0x2d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e5c:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e5e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e62:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e64:	f001 faf4 	bl	8002450 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e68:	2210      	movs	r2, #16
 8000e6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	4880      	ldr	r0, [pc, #512]	; (8001070 <main+0x2d8>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e70:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e74:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f001 faea 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000e7c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e80:	2207      	movs	r2, #7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e82:	487c      	ldr	r0, [pc, #496]	; (8001074 <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e84:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e86:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000e88:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f001 fae0 	bl	8002450 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e90:	4622      	mov	r2, r4
 8000e92:	4621      	mov	r1, r4
 8000e94:	2006      	movs	r0, #6
 8000e96:	f001 f96d 	bl	8002174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e9a:	2006      	movs	r0, #6
 8000e9c:	f001 f9a8 	bl	80021f0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000ea0:	4622      	mov	r2, r4
 8000ea2:	4621      	mov	r1, r4
 8000ea4:	2007      	movs	r0, #7
 8000ea6:	f001 f965 	bl	8002174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000eaa:	2007      	movs	r0, #7
 8000eac:	f001 f9a0 	bl	80021f0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000eb0:	4622      	mov	r2, r4
 8000eb2:	4621      	mov	r1, r4
 8000eb4:	2008      	movs	r0, #8
 8000eb6:	f001 f95d 	bl	8002174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000eba:	2008      	movs	r0, #8
 8000ebc:	f001 f998 	bl	80021f0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000ec0:	4622      	mov	r2, r4
 8000ec2:	4621      	mov	r1, r4
 8000ec4:	200a      	movs	r0, #10
 8000ec6:	f001 f955 	bl	8002174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000eca:	200a      	movs	r0, #10
 8000ecc:	f001 f990 	bl	80021f0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ed0:	4622      	mov	r2, r4
 8000ed2:	4621      	mov	r1, r4
 8000ed4:	2017      	movs	r0, #23
 8000ed6:	f001 f94d 	bl	8002174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000eda:	2017      	movs	r0, #23
 8000edc:	f001 f988 	bl	80021f0 <HAL_NVIC_EnableIRQ>
  htim9.Instance = TIM9;
 8000ee0:	4b65      	ldr	r3, [pc, #404]	; (8001078 <main+0x2e0>)
 8000ee2:	602b      	str	r3, [r5, #0]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ee4:	2780      	movs	r7, #128	; 0x80
  htim9.Init.Period = 192;
 8000ee6:	23c0      	movs	r3, #192	; 0xc0
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000ee8:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eea:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000eee:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef2:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef6:	612c      	str	r4, [r5, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ef8:	61af      	str	r7, [r5, #24]
  htim9.Init.Period = 192;
 8000efa:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000efc:	f002 f8ca 	bl	8003094 <HAL_TIM_Base_Init>
 8000f00:	b108      	cbz	r0, 8000f06 <main+0x16e>
 8000f02:	b672      	cpsid	i
 8000f04:	e7fe      	b.n	8000f04 <main+0x16c>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000f06:	4628      	mov	r0, r5
 8000f08:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8000f0e:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000f10:	f002 f98a 	bl	8003228 <HAL_TIM_ConfigClockSource>
 8000f14:	b9e8      	cbnz	r0, 8000f52 <main+0x1ba>
  hadc1.Instance = ADC1;
 8000f16:	4c59      	ldr	r4, [pc, #356]	; (800107c <main+0x2e4>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f18:	4a59      	ldr	r2, [pc, #356]	; (8001080 <main+0x2e8>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f1a:	60a0      	str	r0, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1c:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8000f20:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  hadc1.Init.ScanConvMode = DISABLE;
 8000f24:	6120      	str	r0, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f26:	7620      	strb	r0, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f28:	f884 0020 	strb.w	r0, [r4, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2c:	60e0      	str	r0, [r4, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f2e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f32:	4854      	ldr	r0, [pc, #336]	; (8001084 <main+0x2ec>)
  hadc1.Init.NbrOfConversion = 1;
 8000f34:	61e6      	str	r6, [r4, #28]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f3a:	e9c4 0300 	strd	r0, r3, [r4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f44:	4620      	mov	r0, r4
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f46:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f48:	f000 ff96 	bl	8001e78 <HAL_ADC_Init>
 8000f4c:	b118      	cbz	r0, 8000f56 <main+0x1be>
 8000f4e:	b672      	cpsid	i
 8000f50:	e7fe      	b.n	8000f50 <main+0x1b8>
 8000f52:	b672      	cpsid	i
 8000f54:	e7fe      	b.n	8000f54 <main+0x1bc>
  sConfig.Channel = ADC_CHANNEL_1;
 8000f56:	2301      	movs	r3, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f58:	9010      	str	r0, [sp, #64]	; 0x40
  sConfig.Channel = ADC_CHANNEL_1;
 8000f5a:	2201      	movs	r2, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_1;
 8000f60:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f64:	f001 f836 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b978      	cbnz	r0, 8000f8c <main+0x1f4>
  htim10.Instance = TIM10;
 8000f6c:	4846      	ldr	r0, [pc, #280]	; (8001088 <main+0x2f0>)
  htim10.Init.Period = 65535;
 8000f6e:	f64f 74ff 	movw	r4, #65535	; 0xffff
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f72:	e9c0 3301 	strd	r3, r3, [r0, #4]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f76:	6103      	str	r3, [r0, #16]
  htim10.Instance = TIM10;
 8000f78:	4b44      	ldr	r3, [pc, #272]	; (800108c <main+0x2f4>)
 8000f7a:	6003      	str	r3, [r0, #0]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f7c:	6187      	str	r7, [r0, #24]
  htim10.Init.Period = 65535;
 8000f7e:	60c4      	str	r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f80:	f002 f888 	bl	8003094 <HAL_TIM_Base_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	b118      	cbz	r0, 8000f90 <main+0x1f8>
 8000f88:	b672      	cpsid	i
 8000f8a:	e7fe      	b.n	8000f8a <main+0x1f2>
 8000f8c:	b672      	cpsid	i
 8000f8e:	e7fe      	b.n	8000f8e <main+0x1f6>
  htim11.Instance = TIM11;
 8000f90:	483f      	ldr	r0, [pc, #252]	; (8001090 <main+0x2f8>)
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f92:	e9c0 3301 	strd	r3, r3, [r0, #4]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f96:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f98:	6183      	str	r3, [r0, #24]
  htim11.Instance = TIM11;
 8000f9a:	4b3e      	ldr	r3, [pc, #248]	; (8001094 <main+0x2fc>)
 8000f9c:	6003      	str	r3, [r0, #0]
  htim11.Init.Period = 65535;
 8000f9e:	60c4      	str	r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000fa0:	f002 f878 	bl	8003094 <HAL_TIM_Base_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	b108      	cbz	r0, 8000fac <main+0x214>
 8000fa8:	b672      	cpsid	i
 8000faa:	e7fe      	b.n	8000faa <main+0x212>
  hi2c1.Instance = I2C1;
 8000fac:	483a      	ldr	r0, [pc, #232]	; (8001098 <main+0x300>)
  hi2c1.Init.ClockSpeed = 100000;
 8000fae:	493b      	ldr	r1, [pc, #236]	; (800109c <main+0x304>)
  hi2c1.Init.OwnAddress1 = 0;
 8000fb0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8000fb4:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fb8:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c1.Init.ClockSpeed = 100000;
 8000fbc:	4b38      	ldr	r3, [pc, #224]	; (80010a0 <main+0x308>)
 8000fbe:	e9c0 1300 	strd	r1, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fc6:	6103      	str	r3, [r0, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fc8:	f001 fb44 	bl	8002654 <HAL_I2C_Init>
 8000fcc:	b108      	cbz	r0, 8000fd2 <main+0x23a>
 8000fce:	b672      	cpsid	i
 8000fd0:	e7fe      	b.n	8000fd0 <main+0x238>
  htim2.Instance = TIM2;
 8000fd2:	4c34      	ldr	r4, [pc, #208]	; (80010a4 <main+0x30c>)
  htim2.Init.Period = 240000;
 8000fd4:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <main+0x310>)
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd6:	6120      	str	r0, [r4, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd8:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8000fdc:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe0:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe4:	e9c4 0001 	strd	r0, r0, [r4, #4]
  htim2.Init.Period = 240000;
 8000fe8:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fea:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 8000fec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ff0:	61a7      	str	r7, [r4, #24]
  htim2.Instance = TIM2;
 8000ff2:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ff4:	f002 f84e 	bl	8003094 <HAL_TIM_Base_Init>
 8000ff8:	b108      	cbz	r0, 8000ffe <main+0x266>
 8000ffa:	b672      	cpsid	i
 8000ffc:	e7fe      	b.n	8000ffc <main+0x264>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ffe:	a90e      	add	r1, sp, #56	; 0x38
 8001000:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001002:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001004:	f002 f910 	bl	8003228 <HAL_TIM_ConfigClockSource>
 8001008:	b108      	cbz	r0, 800100e <main+0x276>
 800100a:	b672      	cpsid	i
 800100c:	e7fe      	b.n	800100c <main+0x274>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800100e:	4620      	mov	r0, r4
 8001010:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001012:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001016:	f002 fa69 	bl	80034ec <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	b108      	cbz	r0, 8001020 <main+0x288>
 800101c:	b672      	cpsid	i
 800101e:	e7fe      	b.n	800101e <main+0x286>
  htim5.Instance = TIM5;
 8001020:	4c22      	ldr	r4, [pc, #136]	; (80010ac <main+0x314>)
 8001022:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <main+0x318>)
 8001024:	6022      	str	r2, [r4, #0]
  htim5.Init.Period = 240000;
 8001026:	4a20      	ldr	r2, [pc, #128]	; (80010a8 <main+0x310>)
 8001028:	60e2      	str	r2, [r4, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102a:	2300      	movs	r3, #0
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800102c:	2280      	movs	r2, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800102e:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001030:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8001034:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001038:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103c:	e9c4 3301 	strd	r3, r3, [r4, #4]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001040:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001042:	61a2      	str	r2, [r4, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001044:	f002 f826 	bl	8003094 <HAL_TIM_Base_Init>
 8001048:	b108      	cbz	r0, 800104e <main+0x2b6>
 800104a:	b672      	cpsid	i
 800104c:	e7fe      	b.n	800104c <main+0x2b4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001052:	a90e      	add	r1, sp, #56	; 0x38
 8001054:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001056:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001058:	f002 f8e6 	bl	8003228 <HAL_TIM_ConfigClockSource>
 800105c:	b350      	cbz	r0, 80010b4 <main+0x31c>
 800105e:	b672      	cpsid	i
 8001060:	e7fe      	b.n	8001060 <main+0x2c8>
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800
 8001068:	40021000 	.word	0x40021000
 800106c:	200002bc 	.word	0x200002bc
 8001070:	40020000 	.word	0x40020000
 8001074:	40020400 	.word	0x40020400
 8001078:	40014000 	.word	0x40014000
 800107c:	20000100 	.word	0x20000100
 8001080:	0f000001 	.word	0x0f000001
 8001084:	40012000 	.word	0x40012000
 8001088:	2000019c 	.word	0x2000019c
 800108c:	40014400 	.word	0x40014400
 8001090:	200001e4 	.word	0x200001e4
 8001094:	40014800 	.word	0x40014800
 8001098:	20000148 	.word	0x20000148
 800109c:	40005400 	.word	0x40005400
 80010a0:	000186a0 	.word	0x000186a0
 80010a4:	2000022c 	.word	0x2000022c
 80010a8:	0003a980 	.word	0x0003a980
 80010ac:	20000274 	.word	0x20000274
 80010b0:	40000c00 	.word	0x40000c00
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b4:	2200      	movs	r2, #0
 80010b6:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010b8:	a90c      	add	r1, sp, #48	; 0x30
 80010ba:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010c0:	f002 fa14 	bl	80034ec <HAL_TIMEx_MasterConfigSynchronization>
 80010c4:	4607      	mov	r7, r0
 80010c6:	b108      	cbz	r0, 80010cc <main+0x334>
 80010c8:	b672      	cpsid	i
 80010ca:	e7fe      	b.n	80010ca <main+0x332>
  lcd_init();
 80010cc:	f7ff fc90 	bl	80009f0 <lcd_init>
}
static void set_local_osc(float freq){
	TIM9->ARR = (uint16_t)(48e3/freq+1);
}
static void reset_data(){
	MA_min_val = 4095;
 80010d0:	4aad      	ldr	r2, [pc, #692]	; (8001388 <main+0x5f0>)
	MF_max_val = 0;
	EF_min_val = 65535;
	MF_rdy = 0;
 80010d2:	4eae      	ldr	r6, [pc, #696]	; (800138c <main+0x5f4>)
	EF_rdy = 0;
	ADC1->SR &= ~0x10;
 80010d4:	49ae      	ldr	r1, [pc, #696]	; (8001390 <main+0x5f8>)
  MA_mov_avg_index = 0;
 80010d6:	f8df a33c 	ldr.w	sl, [pc, #828]	; 8001414 <main+0x67c>
  EF_mov_avg_index = 0;
 80010da:	f8df b33c 	ldr.w	fp, [pc, #828]	; 8001418 <main+0x680>
  flashCheck = read_data(FLASH_MEMORY_BEGIN);
 80010de:	48ad      	ldr	r0, [pc, #692]	; (8001394 <main+0x5fc>)
	for(i=0;i<8;i++){
 80010e0:	4cad      	ldr	r4, [pc, #692]	; (8001398 <main+0x600>)
	MA_min_val = 4095;
 80010e2:	f640 73ff 	movw	r3, #4095	; 0xfff
 80010e6:	6013      	str	r3, [r2, #0]
	MF_max_val = 0;
 80010e8:	4aac      	ldr	r2, [pc, #688]	; (800139c <main+0x604>)
 80010ea:	6017      	str	r7, [r2, #0]
	EF_min_val = 65535;
 80010ec:	4aac      	ldr	r2, [pc, #688]	; (80013a0 <main+0x608>)
 80010ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f2:	6013      	str	r3, [r2, #0]
	EF_rdy = 0;
 80010f4:	4bab      	ldr	r3, [pc, #684]	; (80013a4 <main+0x60c>)
	MF_rdy = 0;
 80010f6:	7037      	strb	r7, [r6, #0]
	EF_rdy = 0;
 80010f8:	701f      	strb	r7, [r3, #0]
	ADC1->SR &= ~0x10;
 80010fa:	680a      	ldr	r2, [r1, #0]
  EFWeight = EFreqWeight / (EFreqWeight + MFreqWeight + MAmplWeight);
 80010fc:	4baa      	ldr	r3, [pc, #680]	; (80013a8 <main+0x610>)
	ADC1->SR &= ~0x10;
 80010fe:	f022 0210 	bic.w	r2, r2, #16
 8001102:	600a      	str	r2, [r1, #0]
  MF_mov_avg_index = 0;
 8001104:	4aa9      	ldr	r2, [pc, #676]	; (80013ac <main+0x614>)
 8001106:	7017      	strb	r7, [r2, #0]
  EFWeight = EFreqWeight / (EFreqWeight + MFreqWeight + MAmplWeight);
 8001108:	4aa9      	ldr	r2, [pc, #676]	; (80013b0 <main+0x618>)
  MA_mov_avg_index = 0;
 800110a:	f88a 7000 	strb.w	r7, [sl]
  EF_mov_avg_index = 0;
 800110e:	f88b 7000 	strb.w	r7, [fp]
  EFWeight = EFreqWeight / (EFreqWeight + MFreqWeight + MAmplWeight);
 8001112:	6013      	str	r3, [r2, #0]
  MFWeight = MFreqWeight / (EFreqWeight + MFreqWeight + MAmplWeight);
 8001114:	4aa7      	ldr	r2, [pc, #668]	; (80013b4 <main+0x61c>)
 8001116:	6013      	str	r3, [r2, #0]
  MAWeight = MAmplWeight / (EFreqWeight + MFreqWeight + MAmplWeight);
 8001118:	4aa7      	ldr	r2, [pc, #668]	; (80013b8 <main+0x620>)
 800111a:	6013      	str	r3, [r2, #0]
  flashCheck = read_data(FLASH_MEMORY_BEGIN);
 800111c:	f7ff fc22 	bl	8000964 <read_data>
  if(flashCheck == 8){
 8001120:	2808      	cmp	r0, #8
 8001122:	f000 821e 	beq.w	8001562 <main+0x7ca>
 8001126:	4ba5      	ldr	r3, [pc, #660]	; (80013bc <main+0x624>)
 8001128:	9304      	str	r3, [sp, #16]
  if(debug_mode){
 800112a:	4ba5      	ldr	r3, [pc, #660]	; (80013c0 <main+0x628>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 81c1 	beq.w	80014ba <main+0x722>
	  counting_mode = 1;
 8001138:	4aa2      	ldr	r2, [pc, #648]	; (80013c4 <main+0x62c>)
	  cal_mode = 0;
 800113a:	49a3      	ldr	r1, [pc, #652]	; (80013c8 <main+0x630>)
	  counting_mode = 1;
 800113c:	9205      	str	r2, [sp, #20]
 800113e:	2301      	movs	r3, #1
 8001140:	7013      	strb	r3, [r2, #0]
	  cal_mode = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	9106      	str	r1, [sp, #24]
 8001146:	700b      	strb	r3, [r1, #0]
  HAL_TIM_Base_Start_IT(&htim10);
 8001148:	48a0      	ldr	r0, [pc, #640]	; (80013cc <main+0x634>)
  ADC1->CR2 |= 0x01;
 800114a:	f8df 9244 	ldr.w	r9, [pc, #580]	; 8001390 <main+0x5f8>
 800114e:	4fa0      	ldr	r7, [pc, #640]	; (80013d0 <main+0x638>)
  HAL_TIM_Base_Start_IT(&htim10);
 8001150:	f002 f81e 	bl	8003190 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8001154:	489f      	ldr	r0, [pc, #636]	; (80013d4 <main+0x63c>)
 8001156:	f002 f81b 	bl	8003190 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800115a:	489f      	ldr	r0, [pc, #636]	; (80013d8 <main+0x640>)
 800115c:	f002 f818 	bl	8003190 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001160:	489e      	ldr	r0, [pc, #632]	; (80013dc <main+0x644>)
 8001162:	f002 f815 	bl	8003190 <HAL_TIM_Base_Start_IT>
  ADC1->CR2 |= 0x01;
 8001166:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	f8c9 3008 	str.w	r3, [r9, #8]
  display_total_init();
 8001172:	f7ff fcc1 	bl	8000af8 <display_total_init>
  display_total_update(0);
 8001176:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 80013e0 <main+0x648>
 800117a:	f7ff fd1b 	bl	8000bb4 <display_total_update>
 800117e:	4b99      	ldr	r3, [pc, #612]	; (80013e4 <main+0x64c>)
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	4b99      	ldr	r3, [pc, #612]	; (80013e8 <main+0x650>)
	servo2_timer = (ang*120)+7440;
 8001184:	4a99      	ldr	r2, [pc, #612]	; (80013ec <main+0x654>)
 8001186:	9403      	str	r4, [sp, #12]
 8001188:	461d      	mov	r5, r3
 800118a:	4b99      	ldr	r3, [pc, #612]	; (80013f0 <main+0x658>)
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	f244 7340 	movw	r3, #18240	; 0x4740
	*(index) = *(index) + 1;
	*(index) %= moving_average_size;
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
		sum += array_pointer[sum_index];
	}
	sum /= (float)moving_average_size;
 8001192:	eeb4 8a00 	vmov.f32	s16, #64	; 0x3e000000  0.125
	servo2_timer = (ang*120)+7440;
 8001196:	8013      	strh	r3, [r2, #0]
  while(!MF_sensor_output_stable && !MA_sensor_output_stable && !EF_sensor_output_stable ){
 8001198:	4b96      	ldr	r3, [pc, #600]	; (80013f4 <main+0x65c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	f040 813d 	bne.w	800141c <main+0x684>
 80011a2:	4b95      	ldr	r3, [pc, #596]	; (80013f8 <main+0x660>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f040 8138 	bne.w	800141c <main+0x684>
 80011ac:	4b93      	ldr	r3, [pc, #588]	; (80013fc <main+0x664>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f040 8131 	bne.w	800141c <main+0x684>
	  if(MF_rdy == 1){
 80011ba:	7832      	ldrb	r2, [r6, #0]
 80011bc:	2a01      	cmp	r2, #1
 80011be:	fa5f f882 	uxtb.w	r8, r2
 80011c2:	f000 8092 	beq.w	80012ea <main+0x552>
	  if(EF_rdy == 1){
 80011c6:	4b77      	ldr	r3, [pc, #476]	; (80013a4 <main+0x60c>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	fa5f f883 	uxtb.w	r8, r3
 80011d0:	d03d      	beq.n	800124e <main+0x4b6>
	  if(MA_rdy){
 80011d2:	f8d9 3000 	ldr.w	r3, [r9]
		  MA_new_val = ADC1->DR;
 80011d6:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 80011da:	603b      	str	r3, [r7, #0]
		  if(abs(MA_avg - MA_new_val)/MA_new_val < 0.01) {
 80011dc:	4b88      	ldr	r3, [pc, #544]	; (8001400 <main+0x668>)
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	edd7 7a00 	vldr	s15, [r7]
 80011e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ee:	ee17 0a90 	vmov	r0, s15
 80011f2:	f7ff f955 	bl	80004a0 <__aeabi_f2d>
 80011f6:	ec41 0b10 	vmov	d0, r0, r1
 80011fa:	f002 f9b3 	bl	8003564 <abs>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	4298      	cmp	r0, r3
 8001202:	d203      	bcs.n	800120c <main+0x474>
			  MA_sensor_output_stable = 1;
 8001204:	4b7c      	ldr	r3, [pc, #496]	; (80013f8 <main+0x660>)
 8001206:	f04f 0201 	mov.w	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
	array_pointer[*(index)] = new_value;
 800120c:	f89a 3000 	ldrb.w	r3, [sl]
 8001210:	f89a 2000 	ldrb.w	r2, [sl]
 8001214:	9901      	ldr	r1, [sp, #4]
	float sum = 0;
 8001216:	eddf 7a72 	vldr	s15, [pc, #456]	; 80013e0 <main+0x648>
	*(index) = *(index) + 1;
 800121a:	3301      	adds	r3, #1
	*(index) %= moving_average_size;
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	f88a 3000 	strb.w	r3, [sl]
		  MA_avg = moving_avg(&MA_mov_avg_index, MA_mov_avg, MA_new_val);
 8001224:	683b      	ldr	r3, [r7, #0]
	array_pointer[*(index)] = new_value;
 8001226:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800122a:	4b71      	ldr	r3, [pc, #452]	; (80013f0 <main+0x658>)
 800122c:	9301      	str	r3, [sp, #4]
		sum += array_pointer[sum_index];
 800122e:	ecb3 7a01 	vldmia	r3!, {s14}
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8001232:	3401      	adds	r4, #1
		sum += array_pointer[sum_index];
 8001234:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8001238:	b2e4      	uxtb	r4, r4
 800123a:	2c08      	cmp	r4, #8
		sum += array_pointer[sum_index];
 800123c:	ee77 7a87 	vadd.f32	s15, s15, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8001240:	d1f5      	bne.n	800122e <main+0x496>
	sum /= (float)moving_average_size;
 8001242:	ee67 7a88 	vmul.f32	s15, s15, s16
		  MA_avg = moving_avg(&MA_mov_avg_index, MA_mov_avg, MA_new_val);
 8001246:	4b6e      	ldr	r3, [pc, #440]	; (8001400 <main+0x668>)
 8001248:	edc3 7a00 	vstr	s15, [r3]
 800124c:	e7a4      	b.n	8001198 <main+0x400>
		  EF_rdy = 0;
 800124e:	4a55      	ldr	r2, [pc, #340]	; (80013a4 <main+0x60c>)
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	7013      	strb	r3, [r2, #0]
		  if(abs(EF_avg - EF_new_val)/EF_avg < 0.01) {
 8001256:	4a6b      	ldr	r2, [pc, #428]	; (8001404 <main+0x66c>)
 8001258:	4b6b      	ldr	r3, [pc, #428]	; (8001408 <main+0x670>)
 800125a:	ed93 7a00 	vldr	s14, [r3]
 800125e:	edd2 7a00 	vldr	s15, [r2]
 8001262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800126a:	ee17 0a90 	vmov	r0, s15
 800126e:	f7ff f917 	bl	80004a0 <__aeabi_f2d>
 8001272:	ec41 0b10 	vmov	d0, r0, r1
 8001276:	f002 f975 	bl	8003564 <abs>
 800127a:	4b63      	ldr	r3, [pc, #396]	; (8001408 <main+0x670>)
 800127c:	ee07 0a90 	vmov	s15, r0
 8001280:	ed93 7a00 	vldr	s14, [r3]
 8001284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001288:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800128c:	ee17 0a90 	vmov	r0, s15
 8001290:	f7ff f906 	bl	80004a0 <__aeabi_f2d>
 8001294:	a33a      	add	r3, pc, #232	; (adr r3, 8001380 <main+0x5e8>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7ff f9b9 	bl	8000610 <__aeabi_dcmplt>
 800129e:	b110      	cbz	r0, 80012a6 <main+0x50e>
			  EF_sensor_output_stable = 1;
 80012a0:	4b56      	ldr	r3, [pc, #344]	; (80013fc <main+0x664>)
 80012a2:	f883 8000 	strb.w	r8, [r3]
	array_pointer[*(index)] = new_value;
 80012a6:	f89b 3000 	ldrb.w	r3, [fp]
 80012aa:	f89b 2000 	ldrb.w	r2, [fp]
	float sum = 0;
 80012ae:	eddf 7a4c 	vldr	s15, [pc, #304]	; 80013e0 <main+0x648>
	*(index) = *(index) + 1;
 80012b2:	3301      	adds	r3, #1
	*(index) %= moving_average_size;
 80012b4:	f003 0307 	and.w	r3, r3, #7
 80012b8:	f88b 3000 	strb.w	r3, [fp]
		  EF_avg = moving_avg(&EF_mov_avg_index, EF_mov_avg, EF_new_val);
 80012bc:	4b51      	ldr	r3, [pc, #324]	; (8001404 <main+0x66c>)
 80012be:	681b      	ldr	r3, [r3, #0]
	array_pointer[*(index)] = new_value;
 80012c0:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 80012c4:	4a48      	ldr	r2, [pc, #288]	; (80013e8 <main+0x650>)
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 80012c6:	2300      	movs	r3, #0
 80012c8:	4615      	mov	r5, r2
		sum += array_pointer[sum_index];
 80012ca:	ecb2 7a01 	vldmia	r2!, {s14}
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 80012ce:	3301      	adds	r3, #1
		sum += array_pointer[sum_index];
 80012d0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b08      	cmp	r3, #8
		sum += array_pointer[sum_index];
 80012d8:	ee77 7a87 	vadd.f32	s15, s15, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 80012dc:	d1f5      	bne.n	80012ca <main+0x532>
	sum /= (float)moving_average_size;
 80012de:	ee67 7a88 	vmul.f32	s15, s15, s16
		  EF_avg = moving_avg(&EF_mov_avg_index, EF_mov_avg, EF_new_val);
 80012e2:	4b49      	ldr	r3, [pc, #292]	; (8001408 <main+0x670>)
 80012e4:	edc3 7a00 	vstr	s15, [r3]
 80012e8:	e773      	b.n	80011d2 <main+0x43a>
		  if(abs(MF_avg - MF_new_val)/MF_avg < 0.01) {
 80012ea:	4a48      	ldr	r2, [pc, #288]	; (800140c <main+0x674>)
		  MF_rdy = 0;
 80012ec:	7033      	strb	r3, [r6, #0]
		  if(abs(MF_avg - MF_new_val)/MF_avg < 0.01) {
 80012ee:	4b48      	ldr	r3, [pc, #288]	; (8001410 <main+0x678>)
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	edd2 7a00 	vldr	s15, [r2]
 80012f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001300:	ee17 0a90 	vmov	r0, s15
 8001304:	f7ff f8cc 	bl	80004a0 <__aeabi_f2d>
 8001308:	ec41 0b10 	vmov	d0, r0, r1
 800130c:	f002 f92a 	bl	8003564 <abs>
 8001310:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <main+0x678>)
 8001312:	ee07 0a90 	vmov	s15, r0
 8001316:	ed93 7a00 	vldr	s14, [r3]
 800131a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800131e:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8001322:	ee17 0a90 	vmov	r0, s15
 8001326:	f7ff f8bb 	bl	80004a0 <__aeabi_f2d>
 800132a:	a315      	add	r3, pc, #84	; (adr r3, 8001380 <main+0x5e8>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f96e 	bl	8000610 <__aeabi_dcmplt>
 8001334:	b110      	cbz	r0, 800133c <main+0x5a4>
			  MF_sensor_output_stable = 1;
 8001336:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <main+0x65c>)
 8001338:	f883 8000 	strb.w	r8, [r3]
	array_pointer[*(index)] = new_value;
 800133c:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <main+0x614>)
	float sum = 0;
 800133e:	eddf 7a28 	vldr	s15, [pc, #160]	; 80013e0 <main+0x648>
	array_pointer[*(index)] = new_value;
 8001342:	7813      	ldrb	r3, [r2, #0]
 8001344:	4611      	mov	r1, r2
	*(index) = *(index) + 1;
 8001346:	3301      	adds	r3, #1
	*(index) %= moving_average_size;
 8001348:	f003 0307 	and.w	r3, r3, #7
	array_pointer[*(index)] = new_value;
 800134c:	7812      	ldrb	r2, [r2, #0]
	*(index) %= moving_average_size;
 800134e:	700b      	strb	r3, [r1, #0]
		  MF_avg = moving_avg(&MF_mov_avg_index, MF_mov_avg, MF_new_val);
 8001350:	4b2e      	ldr	r3, [pc, #184]	; (800140c <main+0x674>)
	array_pointer[*(index)] = new_value;
 8001352:	9902      	ldr	r1, [sp, #8]
		  MF_avg = moving_avg(&MF_mov_avg_index, MF_mov_avg, MF_new_val);
 8001354:	681b      	ldr	r3, [r3, #0]
	array_pointer[*(index)] = new_value;
 8001356:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800135a:	4a22      	ldr	r2, [pc, #136]	; (80013e4 <main+0x64c>)
 800135c:	9202      	str	r2, [sp, #8]
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 800135e:	2300      	movs	r3, #0
		sum += array_pointer[sum_index];
 8001360:	ecb2 7a01 	vldmia	r2!, {s14}
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8001364:	3301      	adds	r3, #1
		sum += array_pointer[sum_index];
 8001366:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b08      	cmp	r3, #8
		sum += array_pointer[sum_index];
 800136e:	ee77 7a87 	vadd.f32	s15, s15, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8001372:	d1f5      	bne.n	8001360 <main+0x5c8>
	sum /= (float)moving_average_size;
 8001374:	ee67 7a88 	vmul.f32	s15, s15, s16
		  MF_avg = moving_avg(&MF_mov_avg_index, MF_mov_avg, MF_new_val);
 8001378:	4b25      	ldr	r3, [pc, #148]	; (8001410 <main+0x678>)
 800137a:	edc3 7a00 	vstr	s15, [r3]
 800137e:	e722      	b.n	80011c6 <main+0x42e>
 8001380:	47ae147b 	.word	0x47ae147b
 8001384:	3f847ae1 	.word	0x3f847ae1
 8001388:	20000004 	.word	0x20000004
 800138c:	200000f8 	.word	0x200000f8
 8001390:	40012000 	.word	0x40012000
 8001394:	08060000 	.word	0x08060000
 8001398:	20000304 	.word	0x20000304
 800139c:	200000cc 	.word	0x200000cc
 80013a0:	20000000 	.word	0x20000000
 80013a4:	2000008c 	.word	0x2000008c
 80013a8:	3eaaaaab 	.word	0x3eaaaaab
 80013ac:	200000f0 	.word	0x200000f0
 80013b0:	2000005c 	.word	0x2000005c
 80013b4:	200000c4 	.word	0x200000c4
 80013b8:	20000090 	.word	0x20000090
 80013bc:	20000308 	.word	0x20000308
 80013c0:	20000028 	.word	0x20000028
 80013c4:	200000fd 	.word	0x200000fd
 80013c8:	200000fa 	.word	0x200000fa
 80013cc:	2000019c 	.word	0x2000019c
 80013d0:	200000bc 	.word	0x200000bc
 80013d4:	200001e4 	.word	0x200001e4
 80013d8:	2000022c 	.word	0x2000022c
 80013dc:	20000274 	.word	0x20000274
 80013e0:	00000000 	.word	0x00000000
 80013e4:	200000d0 	.word	0x200000d0
 80013e8:	20000064 	.word	0x20000064
 80013ec:	2000002c 	.word	0x2000002c
 80013f0:	20000098 	.word	0x20000098
 80013f4:	200000f9 	.word	0x200000f9
 80013f8:	200000c0 	.word	0x200000c0
 80013fc:	2000008d 	.word	0x2000008d
 8001400:	20000094 	.word	0x20000094
 8001404:	20000088 	.word	0x20000088
 8001408:	20000060 	.word	0x20000060
 800140c:	200000f4 	.word	0x200000f4
 8001410:	200000c8 	.word	0x200000c8
 8001414:	200000b8 	.word	0x200000b8
 8001418:	20000084 	.word	0x20000084
	MA_min_val = 4095;
 800141c:	49ab      	ldr	r1, [pc, #684]	; (80016cc <main+0x934>)
	ADC1->SR &= ~0x10;
 800141e:	f8df 831c 	ldr.w	r8, [pc, #796]	; 800173c <main+0x9a4>
	  		if(probability_match(&savedCoins[i], &current_coin) >= criticalCertainty){
 8001422:	eddf 9aab 	vldr	s19, [pc, #684]	; 80016d0 <main+0x938>
 8001426:	9c03      	ldr	r4, [sp, #12]
	MA_min_val = 4095;
 8001428:	f640 72ff 	movw	r2, #4095	; 0xfff
 800142c:	600a      	str	r2, [r1, #0]
	MF_max_val = 0;
 800142e:	4aa9      	ldr	r2, [pc, #676]	; (80016d4 <main+0x93c>)
	EF_min_val = 65535;
 8001430:	49a9      	ldr	r1, [pc, #676]	; (80016d8 <main+0x940>)
	MF_max_val = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	6013      	str	r3, [r2, #0]
	EF_min_val = 65535;
 8001436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800143a:	600a      	str	r2, [r1, #0]
	EF_rdy = 0;
 800143c:	4aa7      	ldr	r2, [pc, #668]	; (80016dc <main+0x944>)
	MF_rdy = 0;
 800143e:	7033      	strb	r3, [r6, #0]
	EF_rdy = 0;
 8001440:	7013      	strb	r3, [r2, #0]
	ADC1->SR &= ~0x10;
 8001442:	f8d8 3000 	ldr.w	r3, [r8]
 8001446:	f023 0310 	bic.w	r3, r3, #16
 800144a:	f8c8 3000 	str.w	r3, [r8]
	  while(!coin_inserted){
 800144e:	4ba4      	ldr	r3, [pc, #656]	; (80016e0 <main+0x948>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 8096 	bne.w	8001588 <main+0x7f0>
		  if(MF_rdy == 1)
 800145c:	7831      	ldrb	r1, [r6, #0]
 800145e:	2901      	cmp	r1, #1
 8001460:	d059      	beq.n	8001516 <main+0x77e>
	  	  if(EF_rdy == 1)
 8001462:	4b9e      	ldr	r3, [pc, #632]	; (80016dc <main+0x944>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d02f      	beq.n	80014ca <main+0x732>
	  	  if(MA_rdy){
 800146a:	f8d8 3000 	ldr.w	r3, [r8]
	  		  MA_new_val = ADC1->DR;
 800146e:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8001472:	603b      	str	r3, [r7, #0]
	array_pointer[*(index)] = new_value;
 8001474:	f89a 3000 	ldrb.w	r3, [sl]
 8001478:	f89a 1000 	ldrb.w	r1, [sl]
 800147c:	9801      	ldr	r0, [sp, #4]
	float sum = 0;
 800147e:	eddf 7a99 	vldr	s15, [pc, #612]	; 80016e4 <main+0x94c>
	*(index) = *(index) + 1;
 8001482:	3301      	adds	r3, #1
	*(index) %= moving_average_size;
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	f88a 3000 	strb.w	r3, [sl]
	  		  MA_avg = moving_avg(&MA_mov_avg_index, MA_mov_avg, MA_new_val);
 800148c:	683b      	ldr	r3, [r7, #0]
	array_pointer[*(index)] = new_value;
 800148e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 8001492:	4b95      	ldr	r3, [pc, #596]	; (80016e8 <main+0x950>)
 8001494:	9301      	str	r3, [sp, #4]
		sum += array_pointer[sum_index];
 8001496:	ecb3 7a01 	vldmia	r3!, {s14}
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 800149a:	3201      	adds	r2, #1
		sum += array_pointer[sum_index];
 800149c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	2a08      	cmp	r2, #8
		sum += array_pointer[sum_index];
 80014a4:	ee77 7a87 	vadd.f32	s15, s15, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 80014a8:	d1f5      	bne.n	8001496 <main+0x6fe>
	sum /= (float)moving_average_size;
 80014aa:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80014ae:	ee67 7a87 	vmul.f32	s15, s15, s14
	  		  MA_avg = moving_avg(&MA_mov_avg_index, MA_mov_avg, MA_new_val);
 80014b2:	4b8e      	ldr	r3, [pc, #568]	; (80016ec <main+0x954>)
 80014b4:	edc3 7a00 	vstr	s15, [r3]
 80014b8:	e7c9      	b.n	800144e <main+0x6b6>
	  cal_mode = 1;
 80014ba:	498d      	ldr	r1, [pc, #564]	; (80016f0 <main+0x958>)
	  counting_mode = 0;
 80014bc:	488d      	ldr	r0, [pc, #564]	; (80016f4 <main+0x95c>)
	  cal_mode = 1;
 80014be:	9106      	str	r1, [sp, #24]
 80014c0:	2301      	movs	r3, #1
 80014c2:	700b      	strb	r3, [r1, #0]
	  counting_mode = 0;
 80014c4:	9005      	str	r0, [sp, #20]
 80014c6:	7002      	strb	r2, [r0, #0]
 80014c8:	e63e      	b.n	8001148 <main+0x3b0>
	  		  EF_rdy = 0;
 80014ca:	4984      	ldr	r1, [pc, #528]	; (80016dc <main+0x944>)
	array_pointer[*(index)] = new_value;
 80014cc:	f89b 0000 	ldrb.w	r0, [fp]
	float sum = 0;
 80014d0:	eddf 7a84 	vldr	s15, [pc, #528]	; 80016e4 <main+0x94c>
	  		  EF_rdy = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	700b      	strb	r3, [r1, #0]
	array_pointer[*(index)] = new_value;
 80014d8:	f89b 1000 	ldrb.w	r1, [fp]
	*(index) = *(index) + 1;
 80014dc:	3101      	adds	r1, #1
	*(index) %= moving_average_size;
 80014de:	f001 0107 	and.w	r1, r1, #7
 80014e2:	f88b 1000 	strb.w	r1, [fp]
	  		  EF_avg = moving_avg(&EF_mov_avg_index, EF_mov_avg, EF_new_val);
 80014e6:	4984      	ldr	r1, [pc, #528]	; (80016f8 <main+0x960>)
 80014e8:	6809      	ldr	r1, [r1, #0]
	array_pointer[*(index)] = new_value;
 80014ea:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80014ee:	4983      	ldr	r1, [pc, #524]	; (80016fc <main+0x964>)
 80014f0:	460d      	mov	r5, r1
		sum += array_pointer[sum_index];
 80014f2:	ecb1 7a01 	vldmia	r1!, {s14}
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 80014f6:	3301      	adds	r3, #1
		sum += array_pointer[sum_index];
 80014f8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b08      	cmp	r3, #8
		sum += array_pointer[sum_index];
 8001500:	ee77 7a87 	vadd.f32	s15, s15, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8001504:	d1f5      	bne.n	80014f2 <main+0x75a>
	sum /= (float)moving_average_size;
 8001506:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800150a:	ee67 7a87 	vmul.f32	s15, s15, s14
	  		  EF_avg = moving_avg(&EF_mov_avg_index, EF_mov_avg, EF_new_val);
 800150e:	4b7c      	ldr	r3, [pc, #496]	; (8001700 <main+0x968>)
 8001510:	edc3 7a00 	vstr	s15, [r3]
 8001514:	e7a9      	b.n	800146a <main+0x6d2>
	array_pointer[*(index)] = new_value;
 8001516:	497b      	ldr	r1, [pc, #492]	; (8001704 <main+0x96c>)
	  		  MF_rdy = 0;
 8001518:	7033      	strb	r3, [r6, #0]
	array_pointer[*(index)] = new_value;
 800151a:	780b      	ldrb	r3, [r1, #0]
	float sum = 0;
 800151c:	eddf 7a71 	vldr	s15, [pc, #452]	; 80016e4 <main+0x94c>
	array_pointer[*(index)] = new_value;
 8001520:	4608      	mov	r0, r1
	*(index) = *(index) + 1;
 8001522:	3301      	adds	r3, #1
	*(index) %= moving_average_size;
 8001524:	f003 0307 	and.w	r3, r3, #7
	array_pointer[*(index)] = new_value;
 8001528:	7809      	ldrb	r1, [r1, #0]
	*(index) %= moving_average_size;
 800152a:	7003      	strb	r3, [r0, #0]
	  		  MF_avg = moving_avg(&MF_mov_avg_index, MF_mov_avg, MF_new_val);
 800152c:	4b76      	ldr	r3, [pc, #472]	; (8001708 <main+0x970>)
	array_pointer[*(index)] = new_value;
 800152e:	9802      	ldr	r0, [sp, #8]
	  		  MF_avg = moving_avg(&MF_mov_avg_index, MF_mov_avg, MF_new_val);
 8001530:	681b      	ldr	r3, [r3, #0]
	array_pointer[*(index)] = new_value;
 8001532:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 8001536:	4b75      	ldr	r3, [pc, #468]	; (800170c <main+0x974>)
 8001538:	9302      	str	r3, [sp, #8]
 800153a:	4619      	mov	r1, r3
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 800153c:	4613      	mov	r3, r2
		sum += array_pointer[sum_index];
 800153e:	ecb1 7a01 	vldmia	r1!, {s14}
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8001542:	3301      	adds	r3, #1
		sum += array_pointer[sum_index];
 8001544:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b08      	cmp	r3, #8
		sum += array_pointer[sum_index];
 800154c:	ee77 7a87 	vadd.f32	s15, s15, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8001550:	d1f5      	bne.n	800153e <main+0x7a6>
	sum /= (float)moving_average_size;
 8001552:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8001556:	ee67 7a87 	vmul.f32	s15, s15, s14
	  		  MF_avg = moving_avg(&MF_mov_avg_index, MF_mov_avg, MF_new_val);
 800155a:	4b6d      	ldr	r3, [pc, #436]	; (8001710 <main+0x978>)
 800155c:	edc3 7a00 	vstr	s15, [r3]
 8001560:	e77f      	b.n	8001462 <main+0x6ca>
 8001562:	4b6c      	ldr	r3, [pc, #432]	; (8001714 <main+0x97c>)
	for(i=0;i<8;i++){
 8001564:	7027      	strb	r7, [r4, #0]
 8001566:	9304      	str	r3, [sp, #16]
 8001568:	4639      	mov	r1, r7
		Read_coin(&savedCoins[i], i);
 800156a:	b208      	sxth	r0, r1
 800156c:	9b04      	ldr	r3, [sp, #16]
 800156e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001572:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001576:	f7ff fa21 	bl	80009bc <Read_coin>
	for(i=0;i<8;i++){
 800157a:	7821      	ldrb	r1, [r4, #0]
 800157c:	3101      	adds	r1, #1
 800157e:	b2c9      	uxtb	r1, r1
 8001580:	2907      	cmp	r1, #7
 8001582:	7021      	strb	r1, [r4, #0]
 8001584:	d9f1      	bls.n	800156a <main+0x7d2>
 8001586:	e5d0      	b.n	800112a <main+0x392>
		  coin_inserted = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	e00d      	b.n	80015a8 <main+0x810>
	  	  if(EF_rdy == 1)
 800158c:	4a53      	ldr	r2, [pc, #332]	; (80016dc <main+0x944>)
 800158e:	7812      	ldrb	r2, [r2, #0]
 8001590:	2a01      	cmp	r2, #1
 8001592:	d020      	beq.n	80015d6 <main+0x83e>
	  	  if(MA_rdy){
 8001594:	f8d8 2000 	ldr.w	r2, [r8]
	  		  MA_new_val = ADC1->DR;
 8001598:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
 800159c:	603a      	str	r2, [r7, #0]
	  		  if(MA_new_val < MA_min_val){
 800159e:	4a4b      	ldr	r2, [pc, #300]	; (80016cc <main+0x934>)
 80015a0:	6839      	ldr	r1, [r7, #0]
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	4291      	cmp	r1, r2
 80015a6:	d312      	bcc.n	80015ce <main+0x836>
	  while(coin_still_present){
 80015a8:	4a5b      	ldr	r2, [pc, #364]	; (8001718 <main+0x980>)
 80015aa:	7812      	ldrb	r2, [r2, #0]
 80015ac:	b1fa      	cbz	r2, 80015ee <main+0x856>
		  coin_inserted = 0;
 80015ae:	4a4c      	ldr	r2, [pc, #304]	; (80016e0 <main+0x948>)
 80015b0:	7013      	strb	r3, [r2, #0]
		  if(MF_rdy == 1)
 80015b2:	7832      	ldrb	r2, [r6, #0]
 80015b4:	2a01      	cmp	r2, #1
 80015b6:	d1e9      	bne.n	800158c <main+0x7f4>
	  		  if(MF_new_val < MF_max_val)
 80015b8:	4853      	ldr	r0, [pc, #332]	; (8001708 <main+0x970>)
 80015ba:	4a46      	ldr	r2, [pc, #280]	; (80016d4 <main+0x93c>)
	  		  MF_rdy = 0;
 80015bc:	7033      	strb	r3, [r6, #0]
	  		  if(MF_new_val < MF_max_val)
 80015be:	6801      	ldr	r1, [r0, #0]
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	4291      	cmp	r1, r2
 80015c4:	d2e2      	bcs.n	800158c <main+0x7f4>
	  			  MF_max_val = MF_new_val;
 80015c6:	4943      	ldr	r1, [pc, #268]	; (80016d4 <main+0x93c>)
 80015c8:	6802      	ldr	r2, [r0, #0]
 80015ca:	600a      	str	r2, [r1, #0]
 80015cc:	e7de      	b.n	800158c <main+0x7f4>
	  			  MA_min_val = MA_new_val;
 80015ce:	493f      	ldr	r1, [pc, #252]	; (80016cc <main+0x934>)
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	600a      	str	r2, [r1, #0]
 80015d4:	e7e8      	b.n	80015a8 <main+0x810>
	  		  EF_rdy = 0;
 80015d6:	4a41      	ldr	r2, [pc, #260]	; (80016dc <main+0x944>)
	  		  if(EF_new_val > EF_min_val)
 80015d8:	483f      	ldr	r0, [pc, #252]	; (80016d8 <main+0x940>)
	  		  EF_rdy = 0;
 80015da:	7013      	strb	r3, [r2, #0]
	  		  if(EF_new_val > EF_min_val)
 80015dc:	4a46      	ldr	r2, [pc, #280]	; (80016f8 <main+0x960>)
 80015de:	6811      	ldr	r1, [r2, #0]
 80015e0:	6802      	ldr	r2, [r0, #0]
 80015e2:	4291      	cmp	r1, r2
 80015e4:	d9d6      	bls.n	8001594 <main+0x7fc>
	  			  EF_min_val = MF_new_val;
 80015e6:	4a48      	ldr	r2, [pc, #288]	; (8001708 <main+0x970>)
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	6002      	str	r2, [r0, #0]
 80015ec:	e7d2      	b.n	8001594 <main+0x7fc>
	  HAL_TIM_Base_Stop_IT(&htim10);
 80015ee:	484b      	ldr	r0, [pc, #300]	; (800171c <main+0x984>)
 80015f0:	f001 fe02 	bl	80031f8 <HAL_TIM_Base_Stop_IT>
	  HAL_TIM_Base_Stop_IT(&htim11);
 80015f4:	484a      	ldr	r0, [pc, #296]	; (8001720 <main+0x988>)
 80015f6:	f001 fdff 	bl	80031f8 <HAL_TIM_Base_Stop_IT>
	  DA = MA_avg/MA_min_val;
 80015fa:	4b3c      	ldr	r3, [pc, #240]	; (80016ec <main+0x954>)
 80015fc:	ed93 5a00 	vldr	s10, [r3]
 8001600:	4b32      	ldr	r3, [pc, #200]	; (80016cc <main+0x934>)
 8001602:	ed93 6a00 	vldr	s12, [r3]
  	  DF = MF_max_val - MF_avg;
 8001606:	4b33      	ldr	r3, [pc, #204]	; (80016d4 <main+0x93c>)
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	4b40      	ldr	r3, [pc, #256]	; (8001710 <main+0x978>)
 800160e:	ed93 7a00 	vldr	s14, [r3]
  	  DV = EF_avg/EF_min_val;
 8001612:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <main+0x968>)
 8001614:	edd3 5a00 	vldr	s11, [r3]
 8001618:	4b2f      	ldr	r3, [pc, #188]	; (80016d8 <main+0x940>)
 800161a:	edd3 6a00 	vldr	s13, [r3]
  	  if(debug_mode){
 800161e:	4b41      	ldr	r3, [pc, #260]	; (8001724 <main+0x98c>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	f003 09ff 	and.w	r9, r3, #255	; 0xff
 8001626:	bb0b      	cbnz	r3, 800166c <main+0x8d4>
  	  }else if(counting_mode){
 8001628:	9b05      	ldr	r3, [sp, #20]
	  DA = MA_avg/MA_min_val;
 800162a:	eeb8 6a46 	vcvt.f32.u32	s12, s12
  	  DV = EF_avg/EF_min_val;
 800162e:	eef8 6a66 	vcvt.f32.u32	s13, s13
  	  }else if(counting_mode){
 8001632:	781a      	ldrb	r2, [r3, #0]
	  DA = MA_avg/MA_min_val;
 8001634:	ee85 ba06 	vdiv.f32	s22, s10, s12
  	  }else if(counting_mode){
 8001638:	f002 03ff 	and.w	r3, r2, #255	; 0xff
  	  DV = EF_avg/EF_min_val;
 800163c:	eec5 baa6 	vdiv.f32	s23, s11, s13
  	  DF = MF_max_val - MF_avg;
 8001640:	eef8 7a67 	vcvt.f32.u32	s15, s15
  	  }else if(counting_mode){
 8001644:	2a00      	cmp	r2, #0
 8001646:	d133      	bne.n	80016b0 <main+0x918>
	  }else if(cal_mode){
 8001648:	9a06      	ldr	r2, [sp, #24]
 800164a:	7812      	ldrb	r2, [r2, #0]
 800164c:	b172      	cbz	r2, 800166c <main+0x8d4>
		  if(j == 0){
 800164e:	4a36      	ldr	r2, [pc, #216]	; (8001728 <main+0x990>)
 8001650:	7812      	ldrb	r2, [r2, #0]
 8001652:	b992      	cbnz	r2, 800167a <main+0x8e2>
			  sum = 0;
 8001654:	4a35      	ldr	r2, [pc, #212]	; (800172c <main+0x994>)
 8001656:	2300      	movs	r3, #0
 8001658:	6013      	str	r3, [r2, #0]
		  if(i == 9){
 800165a:	7823      	ldrb	r3, [r4, #0]
 800165c:	2b09      	cmp	r3, #9
 800165e:	d105      	bne.n	800166c <main+0x8d4>
			  counting_mode = 1;
 8001660:	9a05      	ldr	r2, [sp, #20]
 8001662:	2301      	movs	r3, #1
 8001664:	7013      	strb	r3, [r2, #0]
			  cal_mode = 0;
 8001666:	9a06      	ldr	r2, [sp, #24]
 8001668:	2300      	movs	r3, #0
 800166a:	7013      	strb	r3, [r2, #0]
  	HAL_TIM_Base_Start_IT(&htim10);
 800166c:	482b      	ldr	r0, [pc, #172]	; (800171c <main+0x984>)
 800166e:	f001 fd8f 	bl	8003190 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim11);
 8001672:	482b      	ldr	r0, [pc, #172]	; (8001720 <main+0x988>)
 8001674:	f001 fd8c 	bl	8003190 <HAL_TIM_Base_Start_IT>
	  while(!coin_inserted){
 8001678:	e6e9      	b.n	800144e <main+0x6b6>
		  }else if(j < 5){
 800167a:	2a04      	cmp	r2, #4
 800167c:	f200 80ef 	bhi.w	800185e <main+0xac6>
			  sum_DV += DV;
 8001680:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <main+0x998>)
			  sum_DF += DF;
 8001682:	4a2c      	ldr	r2, [pc, #176]	; (8001734 <main+0x99c>)
			  sum_DA += DA;
 8001684:	492c      	ldr	r1, [pc, #176]	; (8001738 <main+0x9a0>)
			  sum_DV += DV;
 8001686:	edd3 5a00 	vldr	s11, [r3]
			  sum_DF += DF;
 800168a:	ed92 6a00 	vldr	s12, [r2]
			  sum_DA += DA;
 800168e:	edd1 6a00 	vldr	s13, [r1]
  	  DF = MF_max_val - MF_avg;
 8001692:	ee77 7ac7 	vsub.f32	s15, s15, s14
			  sum_DV += DV;
 8001696:	ee75 baab 	vadd.f32	s23, s11, s23
			  sum_DF += DF;
 800169a:	ee36 7a27 	vadd.f32	s14, s12, s15
			  sum_DA += DA;
 800169e:	ee76 7a8b 	vadd.f32	s15, s13, s22
			  sum_DV += DV;
 80016a2:	edc3 ba00 	vstr	s23, [r3]
			  sum_DF += DF;
 80016a6:	ed82 7a00 	vstr	s14, [r2]
			  sum_DA += DA;
 80016aa:	edc1 7a00 	vstr	s15, [r1]
 80016ae:	e7d4      	b.n	800165a <main+0x8c2>
 80016b0:	4a18      	ldr	r2, [pc, #96]	; (8001714 <main+0x97c>)
	  	  for(i = 0;i<8;i++){
 80016b2:	f884 9000 	strb.w	r9, [r4]
 80016b6:	464b      	mov	r3, r9
 80016b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80016bc:	9407      	str	r4, [sp, #28]
	df_probability = 1 - abs(coin1->df - coin2->df)/coin1->df;
 80016be:	ee37 aa67 	vsub.f32	s20, s14, s15
	if(da_probability <= 0 || df_probability <= 0  || dv_probability <= 0) return 0;
 80016c2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
	  	  for(i = 0;i<8;i++){
 80016c6:	4691      	mov	r9, r2
 80016c8:	461c      	mov	r4, r3
 80016ca:	e040      	b.n	800174e <main+0x9b6>
 80016cc:	20000004 	.word	0x20000004
 80016d0:	3f666666 	.word	0x3f666666
 80016d4:	200000cc 	.word	0x200000cc
 80016d8:	20000000 	.word	0x20000000
 80016dc:	2000008c 	.word	0x2000008c
 80016e0:	200000fb 	.word	0x200000fb
 80016e4:	00000000 	.word	0x00000000
 80016e8:	20000098 	.word	0x20000098
 80016ec:	20000094 	.word	0x20000094
 80016f0:	200000fa 	.word	0x200000fa
 80016f4:	200000fd 	.word	0x200000fd
 80016f8:	20000088 	.word	0x20000088
 80016fc:	20000064 	.word	0x20000064
 8001700:	20000060 	.word	0x20000060
 8001704:	200000f0 	.word	0x200000f0
 8001708:	200000f4 	.word	0x200000f4
 800170c:	200000d0 	.word	0x200000d0
 8001710:	200000c8 	.word	0x200000c8
 8001714:	20000308 	.word	0x20000308
 8001718:	200000fc 	.word	0x200000fc
 800171c:	2000019c 	.word	0x2000019c
 8001720:	200001e4 	.word	0x200001e4
 8001724:	20000028 	.word	0x20000028
 8001728:	20000305 	.word	0x20000305
 800172c:	200003ac 	.word	0x200003ac
 8001730:	200003b8 	.word	0x200003b8
 8001734:	200003b4 	.word	0x200003b4
 8001738:	200003b0 	.word	0x200003b0
 800173c:	40012000 	.word	0x40012000
 8001740:	3401      	adds	r4, #1
 8001742:	b2e4      	uxtb	r4, r4
 8001744:	2c08      	cmp	r4, #8
 8001746:	f109 0914 	add.w	r9, r9, #20
 800174a:	f000 80c1 	beq.w	80018d0 <main+0xb38>
	da_probability = 1 - abs(coin1->da - coin2->da)/coin1->da;
 800174e:	ed99 8a03 	vldr	s16, [r9, #12]
 8001752:	ee78 7a4b 	vsub.f32	s15, s16, s22
 8001756:	ee17 0a90 	vmov	r0, s15
 800175a:	f7fe fea1 	bl	80004a0 <__aeabi_f2d>
 800175e:	ec41 0b10 	vmov	d0, r0, r1
 8001762:	f001 feff 	bl	8003564 <abs>
 8001766:	ee07 0a90 	vmov	s15, r0
 800176a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800176e:	eec7 aa88 	vdiv.f32	s21, s15, s16
	if(da_probability <= 0 || df_probability <= 0  || dv_probability <= 0) return 0;
 8001772:	eef4 aac9 	vcmpe.f32	s21, s18
 8001776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177a:	dae1      	bge.n	8001740 <main+0x9a8>
	df_probability = 1 - abs(coin1->df - coin2->df)/coin1->df;
 800177c:	ed99 ca02 	vldr	s24, [r9, #8]
 8001780:	ee7a 7a0c 	vadd.f32	s15, s20, s24
 8001784:	ee17 0a90 	vmov	r0, s15
 8001788:	f7fe fe8a 	bl	80004a0 <__aeabi_f2d>
 800178c:	ec41 0b10 	vmov	d0, r0, r1
 8001790:	f001 fee8 	bl	8003564 <abs>
 8001794:	ee07 0a90 	vmov	s15, r0
 8001798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179c:	ee87 8a8c 	vdiv.f32	s16, s15, s24
	if(da_probability <= 0 || df_probability <= 0  || dv_probability <= 0) return 0;
 80017a0:	eeb4 8ac9 	vcmpe.f32	s16, s18
 80017a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a8:	daca      	bge.n	8001740 <main+0x9a8>
	dv_probability = 1 - abs(coin1->dv - coin2->dv)/coin1->dv;
 80017aa:	ed99 ca04 	vldr	s24, [r9, #16]
 80017ae:	ee7c 7a6b 	vsub.f32	s15, s24, s23
	da_probability = 1 - abs(coin1->da - coin2->da)/coin1->da;
 80017b2:	ee79 aa6a 	vsub.f32	s21, s18, s21
	dv_probability = 1 - abs(coin1->dv - coin2->dv)/coin1->dv;
 80017b6:	ee17 0a90 	vmov	r0, s15
 80017ba:	f7fe fe71 	bl	80004a0 <__aeabi_f2d>
 80017be:	ec41 0b10 	vmov	d0, r0, r1
 80017c2:	f001 fecf 	bl	8003564 <abs>
 80017c6:	ee07 0a90 	vmov	s15, r0
 80017ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	  			j++;
 80017ce:	9b03      	ldr	r3, [sp, #12]
	dv_probability = 1 - abs(coin1->dv - coin2->dv)/coin1->dv;
 80017d0:	eec7 6a0c 	vdiv.f32	s13, s14, s24
	  			j++;
 80017d4:	3301      	adds	r3, #1
	df_probability = 1 - abs(coin1->df - coin2->df)/coin1->df;
 80017d6:	ee79 7a48 	vsub.f32	s15, s18, s16
	if(da_probability <= 0 || df_probability <= 0  || dv_probability <= 0) return 0;
 80017da:	eef4 6ac9 	vcmpe.f32	s13, s18
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	dv_probability = 1 - abs(coin1->dv - coin2->dv)/coin1->dv;
 80017e2:	ee39 6a66 	vsub.f32	s12, s18, s13
	if(da_probability <= 0 || df_probability <= 0  || dv_probability <= 0) return 0;
 80017e6:	daab      	bge.n	8001740 <main+0x9a8>
	return da_probability * MAWeight + df_probability * MFWeight + dv_probability * EFWeight;
 80017e8:	4a4c      	ldr	r2, [pc, #304]	; (800191c <main+0xb84>)
 80017ea:	edd2 6a00 	vldr	s13, [r2]
 80017ee:	4a4c      	ldr	r2, [pc, #304]	; (8001920 <main+0xb88>)
 80017f0:	edd2 5a00 	vldr	s11, [r2]
 80017f4:	4a4b      	ldr	r2, [pc, #300]	; (8001924 <main+0xb8c>)
 80017f6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80017fa:	ed92 7a00 	vldr	s14, [r2]
 80017fe:	eeea 7aa6 	vfma.f32	s15, s21, s13
 8001802:	eee6 7a07 	vfma.f32	s15, s12, s14
	  		if(probability_match(&savedCoins[i], &current_coin) >= criticalCertainty){
 8001806:	eef4 7ae9 	vcmpe.f32	s15, s19
 800180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180e:	db97      	blt.n	8001740 <main+0x9a8>
	  			j++;
 8001810:	b2db      	uxtb	r3, r3
	  		if(j > 1)break;
 8001812:	2b02      	cmp	r3, #2
	  			current_coin.value = savedCoins[i].value;
 8001814:	edd9 8a01 	vldr	s17, [r9, #4]
	  			j++;
 8001818:	9303      	str	r3, [sp, #12]
	  		if(j > 1)break;
 800181a:	d191      	bne.n	8001740 <main+0x9a8>
 800181c:	4623      	mov	r3, r4
 800181e:	4a42      	ldr	r2, [pc, #264]	; (8001928 <main+0xb90>)
 8001820:	9c07      	ldr	r4, [sp, #28]
 8001822:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001826:	f882 9000 	strb.w	r9, [r2]
 800182a:	7023      	strb	r3, [r4, #0]
	  		HAL_Delay(1000);
 800182c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001830:	f000 fb10 	bl	8001e54 <HAL_Delay>
	MA_min_val = 4095;
 8001834:	493d      	ldr	r1, [pc, #244]	; (800192c <main+0xb94>)
 8001836:	f640 72ff 	movw	r2, #4095	; 0xfff
 800183a:	600a      	str	r2, [r1, #0]
	MF_max_val = 0;
 800183c:	4a3c      	ldr	r2, [pc, #240]	; (8001930 <main+0xb98>)
	EF_min_val = 65535;
 800183e:	493d      	ldr	r1, [pc, #244]	; (8001934 <main+0xb9c>)
	MF_max_val = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	6013      	str	r3, [r2, #0]
	EF_min_val = 65535;
 8001844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001848:	600a      	str	r2, [r1, #0]
	EF_rdy = 0;
 800184a:	4a3b      	ldr	r2, [pc, #236]	; (8001938 <main+0xba0>)
	MF_rdy = 0;
 800184c:	7033      	strb	r3, [r6, #0]
	EF_rdy = 0;
 800184e:	7013      	strb	r3, [r2, #0]
	ADC1->SR &= ~0x10;
 8001850:	f8d8 3000 	ldr.w	r3, [r8]
 8001854:	f023 0310 	bic.w	r3, r3, #16
 8001858:	f8c8 3000 	str.w	r3, [r8]
}
 800185c:	e706      	b.n	800166c <main+0x8d4>
 800185e:	9303      	str	r3, [sp, #12]
			  sum_DV /= 5;
 8001860:	4b36      	ldr	r3, [pc, #216]	; (800193c <main+0xba4>)
 8001862:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8001940 <main+0xba8>
 8001866:	edd3 7a00 	vldr	s15, [r3]
			  sum_DF /= 5;
 800186a:	4a36      	ldr	r2, [pc, #216]	; (8001944 <main+0xbac>)
			  sum_DA/= 5;
 800186c:	4936      	ldr	r1, [pc, #216]	; (8001948 <main+0xbb0>)
			  sum_DF /= 5;
 800186e:	ed92 7a00 	vldr	s14, [r2]
			  sum_DA/= 5;
 8001872:	edd1 6a00 	vldr	s13, [r1]
			  savedCoins[i].da = sum_DA;
 8001876:	7820      	ldrb	r0, [r4, #0]
			  sum_DV /= 5;
 8001878:	ee67 7a86 	vmul.f32	s15, s15, s12
			  sum_DF /= 5;
 800187c:	ee27 7a06 	vmul.f32	s14, s14, s12
			  sum_DA/= 5;
 8001880:	ee66 6a86 	vmul.f32	s13, s13, s12
			  sum_DV /= 5;
 8001884:	edc3 7a00 	vstr	s15, [r3]
			  savedCoins[i].value = coin_values[i];
 8001888:	4b30      	ldr	r3, [pc, #192]	; (800194c <main+0xbb4>)
			  sum_DF /= 5;
 800188a:	ed82 7a00 	vstr	s14, [r2]
			  sum_DA/= 5;
 800188e:	edc1 6a00 	vstr	s13, [r1]
			  savedCoins[i].value = coin_values[i];
 8001892:	eb03 0280 	add.w	r2, r3, r0, lsl #2
			  savedCoins[i].da = sum_DA;
 8001896:	2114      	movs	r1, #20
			  Write_coin((uint8_t *)(&savedCoins[i]), savedCoins[i].coinID);
 8001898:	9b04      	ldr	r3, [sp, #16]
			  savedCoins[i].value = coin_values[i];
 800189a:	f8d2 c000 	ldr.w	ip, [r2]
			  savedCoins[i].da = sum_DA;
 800189e:	fb00 f101 	mul.w	r1, r0, r1
 80018a2:	185a      	adds	r2, r3, r1
			  Write_coin((uint8_t *)(&savedCoins[i]), savedCoins[i].coinID);
 80018a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018a8:	5c59      	ldrb	r1, [r3, r1]
			  savedCoins[i].value = coin_values[i];
 80018aa:	f8c2 c004 	str.w	ip, [r2, #4]
			  Write_coin((uint8_t *)(&savedCoins[i]), savedCoins[i].coinID);
 80018ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			  savedCoins[i].da = sum_DA;
 80018b2:	edc2 6a03 	vstr	s13, [r2, #12]
			  savedCoins[i].df = sum_DF;
 80018b6:	ed82 7a02 	vstr	s14, [r2, #8]
			  savedCoins[i].dv = sum_DV;
 80018ba:	edc2 7a04 	vstr	s15, [r2, #16]
			  Write_coin((uint8_t *)(&savedCoins[i]), savedCoins[i].coinID);
 80018be:	f7ff f85b 	bl	8000978 <Write_coin>
			  j = 0;
 80018c2:	4a19      	ldr	r2, [pc, #100]	; (8001928 <main+0xb90>)
 80018c4:	9b03      	ldr	r3, [sp, #12]
 80018c6:	7013      	strb	r3, [r2, #0]
			  i++;
 80018c8:	7823      	ldrb	r3, [r4, #0]
 80018ca:	3301      	adds	r3, #1
 80018cc:	7023      	strb	r3, [r4, #0]
 80018ce:	e6c4      	b.n	800165a <main+0x8c2>
 80018d0:	4623      	mov	r3, r4
 80018d2:	9c07      	ldr	r4, [sp, #28]
 80018d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80018d8:	7023      	strb	r3, [r4, #0]
 80018da:	4b13      	ldr	r3, [pc, #76]	; (8001928 <main+0xb90>)
	  	  if(j == 1){
 80018dc:	f1b9 0f01 	cmp.w	r9, #1
 80018e0:	f883 9000 	strb.w	r9, [r3]
 80018e4:	d1a2      	bne.n	800182c <main+0xa94>
	  		sum += current_coin.value;
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <main+0xbb8>)
 80018e8:	ed93 0a00 	vldr	s0, [r3]
 80018ec:	ee38 0a80 	vadd.f32	s0, s17, s0
 80018f0:	ed83 0a00 	vstr	s0, [r3]
	  		display_total_update(sum);
 80018f4:	f7ff f95e 	bl	8000bb4 <display_total_update>
	servo2_timer = (ang*120)+7440;
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <main+0xbbc>)
 80018fa:	f641 5110 	movw	r1, #7440	; 0x1d10
	  		HAL_Delay(1000);
 80018fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	servo2_timer = (ang*120)+7440;
 8001902:	8019      	strh	r1, [r3, #0]
	  		HAL_Delay(1000);
 8001904:	f000 faa6 	bl	8001e54 <HAL_Delay>
	  		HAL_Delay(1000);
 8001908:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800190c:	f000 faa2 	bl	8001e54 <HAL_Delay>
	servo2_timer = (ang*120)+7440;
 8001910:	4a10      	ldr	r2, [pc, #64]	; (8001954 <main+0xbbc>)
 8001912:	f244 7340 	movw	r3, #18240	; 0x4740
 8001916:	8013      	strh	r3, [r2, #0]
}
 8001918:	e78c      	b.n	8001834 <main+0xa9c>
 800191a:	bf00      	nop
 800191c:	20000090 	.word	0x20000090
 8001920:	200000c4 	.word	0x200000c4
 8001924:	2000005c 	.word	0x2000005c
 8001928:	20000305 	.word	0x20000305
 800192c:	20000004 	.word	0x20000004
 8001930:	200000cc 	.word	0x200000cc
 8001934:	20000000 	.word	0x20000000
 8001938:	2000008c 	.word	0x2000008c
 800193c:	200003b8 	.word	0x200003b8
 8001940:	3e4ccccd 	.word	0x3e4ccccd
 8001944:	200003b4 	.word	0x200003b4
 8001948:	200003b0 	.word	0x200003b0
 800194c:	20000008 	.word	0x20000008
 8001950:	200003ac 	.word	0x200003ac
 8001954:	2000002c 	.word	0x2000002c

08001958 <HAL_TIM_PeriodElapsedCallback>:
	  if (htim == &htim2) {
 8001958:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800195a:	4298      	cmp	r0, r3
{
 800195c:	b510      	push	{r4, lr}
	  if (htim == &htim2) {
 800195e:	d012      	beq.n	8001986 <HAL_TIM_PeriodElapsedCallback+0x2e>
	  if(htim == &htim5){
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001962:	4298      	cmp	r0, r3
 8001964:	d000      	beq.n	8001968 <HAL_TIM_PeriodElapsedCallback+0x10>
}
 8001966:	bd10      	pop	{r4, pc}
	    if(servo2_state == 1){
 8001968:	4c1d      	ldr	r4, [pc, #116]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x88>)
	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
 800196a:	481e      	ldr	r0, [pc, #120]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
	    if(servo2_state == 1){
 800196c:	7823      	ldrb	r3, [r4, #0]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d026      	beq.n	80019c0 <HAL_TIM_PeriodElapsedCallback+0x68>
	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 1);
 8001972:	2201      	movs	r2, #1
 8001974:	2108      	movs	r1, #8
 8001976:	f000 fe5d 	bl	8002634 <HAL_GPIO_WritePin>
	      TIM5->ARR = 240000;
 800197a:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800197c:	4a1b      	ldr	r2, [pc, #108]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x94>)
	      servo2_state = 1;
 800197e:	2101      	movs	r1, #1
 8001980:	7021      	strb	r1, [r4, #0]
	      TIM5->ARR = 240000;
 8001982:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001984:	bd10      	pop	{r4, pc}
	    if(servo1_state == 1){
 8001986:	4c1a      	ldr	r4, [pc, #104]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x98>)
	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, 0);
 8001988:	4816      	ldr	r0, [pc, #88]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
	    if(servo1_state == 1){
 800198a:	7823      	ldrb	r3, [r4, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d00a      	beq.n	80019a6 <HAL_TIM_PeriodElapsedCallback+0x4e>
	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, 1);
 8001990:	2201      	movs	r2, #1
 8001992:	2104      	movs	r1, #4
 8001994:	f000 fe4e 	bl	8002634 <HAL_GPIO_WritePin>
	      TIM2->ARR = 240000;
 8001998:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	      servo1_state = 1;
 800199c:	2101      	movs	r1, #1
	      TIM2->ARR = 240000;
 800199e:	4a13      	ldr	r2, [pc, #76]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x94>)
	      servo1_state = 1;
 80019a0:	7021      	strb	r1, [r4, #0]
	      TIM2->ARR = 240000;
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80019a4:	bd10      	pop	{r4, pc}
	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2104      	movs	r1, #4
 80019aa:	f000 fe43 	bl	8002634 <HAL_GPIO_WritePin>
	      servo1_state = 0;
 80019ae:	2200      	movs	r2, #0
	      TIM2->ARR = servo1_timer;
 80019b0:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
	      servo1_state = 0;
 80019b2:	7022      	strb	r2, [r4, #0]
	      TIM2->ARR = servo1_timer;
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80019be:	bd10      	pop	{r4, pc}
	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2108      	movs	r1, #8
 80019c4:	f000 fe36 	bl	8002634 <HAL_GPIO_WritePin>
	      servo2_state = 0;
 80019c8:	2200      	movs	r2, #0
	      TIM5->ARR = servo2_timer;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
	      servo2_state = 0;
 80019cc:	7022      	strb	r2, [r4, #0]
	      TIM5->ARR = servo2_timer;
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	4a05      	ldr	r2, [pc, #20]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80019d6:	bd10      	pop	{r4, pc}
 80019d8:	2000022c 	.word	0x2000022c
 80019dc:	20000274 	.word	0x20000274
 80019e0:	200003a9 	.word	0x200003a9
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40000c00 	.word	0x40000c00
 80019ec:	0003a980 	.word	0x0003a980
 80019f0:	200003a8 	.word	0x200003a8
 80019f4:	2000002a 	.word	0x2000002a
 80019f8:	2000002c 	.word	0x2000002c

080019fc <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin == GPIO_PIN_6) {
 80019fc:	2840      	cmp	r0, #64	; 0x40
 80019fe:	d024      	beq.n	8001a4a <HAL_GPIO_EXTI_Callback+0x4e>
  if(GPIO_Pin == GPIO_PIN_4) {
 8001a00:	2810      	cmp	r0, #16
 8001a02:	d10d      	bne.n	8001a20 <HAL_GPIO_EXTI_Callback+0x24>
	  EF_new_val = TIM11->CNT;
 8001a04:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001a06:	491d      	ldr	r1, [pc, #116]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x80>)
 8001a08:	6a58      	ldr	r0, [r3, #36]	; 0x24
	  EF_rdy = 1;
 8001a0a:	4a1d      	ldr	r2, [pc, #116]	; (8001a80 <HAL_GPIO_EXTI_Callback+0x84>)
{
 8001a0c:	b410      	push	{r4}
	  EF_new_val = TIM11->CNT;
 8001a0e:	6008      	str	r0, [r1, #0]
	  TIM11->CNT &= 0x00;
 8001a10:	2000      	movs	r0, #0
	  EF_rdy = 1;
 8001a12:	2101      	movs	r1, #1
	  TIM11->CNT &= 0x00;
 8001a14:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001a16:	6258      	str	r0, [r3, #36]	; 0x24
	  EF_rdy = 1;
 8001a18:	7011      	strb	r1, [r2, #0]
}
 8001a1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a1e:	4770      	bx	lr
  if(GPIO_Pin == GPIO_PIN_0){
 8001a20:	2801      	cmp	r0, #1
 8001a22:	d10a      	bne.n	8001a3a <HAL_GPIO_EXTI_Callback+0x3e>
	  if(!debug_mode){
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <HAL_GPIO_EXTI_Callback+0x88>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a2c:	b923      	cbnz	r3, 8001a38 <HAL_GPIO_EXTI_Callback+0x3c>
		  cal_mode = 1;
 8001a2e:	4916      	ldr	r1, [pc, #88]	; (8001a88 <HAL_GPIO_EXTI_Callback+0x8c>)
		  counting_mode = 0;
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <HAL_GPIO_EXTI_Callback+0x90>)
		  cal_mode = 1;
 8001a32:	7008      	strb	r0, [r1, #0]
		  counting_mode = 0;
 8001a34:	701a      	strb	r2, [r3, #0]
 8001a36:	4770      	bx	lr
 8001a38:	4770      	bx	lr
  if(GPIO_Pin == GPIO_PIN_1){
 8001a3a:	2802      	cmp	r0, #2
 8001a3c:	d115      	bne.n	8001a6a <HAL_GPIO_EXTI_Callback+0x6e>
  	  coin_inserted = 1;
 8001a3e:	4914      	ldr	r1, [pc, #80]	; (8001a90 <HAL_GPIO_EXTI_Callback+0x94>)
  	  coin_still_present = 1;
 8001a40:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <HAL_GPIO_EXTI_Callback+0x98>)
  	  coin_inserted = 1;
 8001a42:	2301      	movs	r3, #1
 8001a44:	700b      	strb	r3, [r1, #0]
  	  coin_still_present = 1;
 8001a46:	7013      	strb	r3, [r2, #0]
 8001a48:	4770      	bx	lr
	  MF_rdy = 1;
 8001a4a:	4a13      	ldr	r2, [pc, #76]	; (8001a98 <HAL_GPIO_EXTI_Callback+0x9c>)
	  MF_new_val = TIM10->CNT;
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <HAL_GPIO_EXTI_Callback+0xa0>)
	  MF_rdy = 1;
 8001a4e:	2101      	movs	r1, #1
 8001a50:	7011      	strb	r1, [r2, #0]
	  MF_new_val = TIM10->CNT;
 8001a52:	4a13      	ldr	r2, [pc, #76]	; (8001aa0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001a54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a56:	6011      	str	r1, [r2, #0]
  	  ADC1->CR2 |= 1 << 30; //start ADC conversion
 8001a58:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <HAL_GPIO_EXTI_Callback+0xa8>)
  	  TIM10->CNT &= 0x00; //reset timer counter
 8001a5a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	6259      	str	r1, [r3, #36]	; 0x24
  	  ADC1->CR2 |= 1 << 30; //start ADC conversion
 8001a60:	6893      	ldr	r3, [r2, #8]
 8001a62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a66:	6093      	str	r3, [r2, #8]
 8001a68:	4770      	bx	lr
  if(GPIO_Pin == GPIO_PIN_2){
 8001a6a:	2804      	cmp	r0, #4
 8001a6c:	d103      	bne.n	8001a76 <HAL_GPIO_EXTI_Callback+0x7a>
	  coin_still_present = 0;
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_GPIO_EXTI_Callback+0x98>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
}
 8001a74:	4770      	bx	lr
 8001a76:	4770      	bx	lr
 8001a78:	40014800 	.word	0x40014800
 8001a7c:	20000088 	.word	0x20000088
 8001a80:	2000008c 	.word	0x2000008c
 8001a84:	20000028 	.word	0x20000028
 8001a88:	200000fa 	.word	0x200000fa
 8001a8c:	200000fd 	.word	0x200000fd
 8001a90:	200000fb 	.word	0x200000fb
 8001a94:	200000fc 	.word	0x200000fc
 8001a98:	200000f8 	.word	0x200000f8
 8001a9c:	40014400 	.word	0x40014400
 8001aa0:	200000f4 	.word	0x200000f4
 8001aa4:	40012000 	.word	0x40012000

08001aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_MspInit+0x34>)
 8001aac:	2100      	movs	r1, #0
 8001aae:	9100      	str	r1, [sp, #0]
 8001ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ab2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ab6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aba:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001abe:	9200      	str	r2, [sp, #0]
 8001ac0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	9101      	str	r1, [sp, #4]
 8001ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ac6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001aca:	641a      	str	r2, [r3, #64]	; 0x40
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad6:	b002      	add	sp, #8
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800

08001ae0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8001ae2:	4a19      	ldr	r2, [pc, #100]	; (8001b48 <HAL_ADC_MspInit+0x68>)
 8001ae4:	6801      	ldr	r1, [r0, #0]
{
 8001ae6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8001aea:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001af0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001af4:	9306      	str	r3, [sp, #24]
  if(hadc->Instance==ADC1)
 8001af6:	d002      	beq.n	8001afe <HAL_ADC_MspInit+0x1e>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001af8:	b009      	add	sp, #36	; 0x24
 8001afa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001afe:	f502 328c 	add.w	r2, r2, #71680	; 0x11800
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8001b06:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8001b0a:	6450      	str	r0, [r2, #68]	; 0x44
 8001b0c:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8001b0e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8001b12:	9000      	str	r0, [sp, #0]
 8001b14:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	480c      	ldr	r0, [pc, #48]	; (8001b4c <HAL_ADC_MspInit+0x6c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b24:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8001b40 <HAL_ADC_MspInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b30:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b34:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f000 fc8b 	bl	8002450 <HAL_GPIO_Init>
}
 8001b3a:	b009      	add	sp, #36	; 0x24
 8001b3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b40:	00000002 	.word	0x00000002
 8001b44:	00000003 	.word	0x00000003
 8001b48:	40012000 	.word	0x40012000
 8001b4c:	40020000 	.word	0x40020000

08001b50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b50:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_I2C_MspInit+0x64>)
 8001b54:	6802      	ldr	r2, [r0, #0]
{
 8001b56:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8001b5a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001b60:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001b64:	9406      	str	r4, [sp, #24]
  if(hi2c->Instance==I2C1)
 8001b66:	d001      	beq.n	8001b6c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b68:	b009      	add	sp, #36	; 0x24
 8001b6a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6c:	4d12      	ldr	r5, [pc, #72]	; (8001bb8 <HAL_I2C_MspInit+0x68>)
 8001b6e:	9400      	str	r4, [sp, #0]
 8001b70:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b72:	4812      	ldr	r0, [pc, #72]	; (8001bbc <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	632b      	str	r3, [r5, #48]	; 0x30
 8001b7a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b82:	22c0      	movs	r2, #192	; 0xc0
 8001b84:	2312      	movs	r3, #18
 8001b86:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b90:	2304      	movs	r3, #4
 8001b92:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b94:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f000 fc5b 	bl	8002450 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b9a:	9401      	str	r4, [sp, #4]
 8001b9c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001b9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ba2:	642b      	str	r3, [r5, #64]	; 0x40
 8001ba4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	9b01      	ldr	r3, [sp, #4]
}
 8001bae:	b009      	add	sp, #36	; 0x24
 8001bb0:	bd30      	pop	{r4, r5, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40005400 	.word	0x40005400
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020400 	.word	0x40020400

08001bc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bc0:	b500      	push	{lr}
  if(htim_base->Instance==TIM2)
 8001bc2:	6803      	ldr	r3, [r0, #0]
 8001bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001bc8:	b087      	sub	sp, #28
  if(htim_base->Instance==TIM2)
 8001bca:	d024      	beq.n	8001c16 <HAL_TIM_Base_MspInit+0x56>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8001bcc:	4a3b      	ldr	r2, [pc, #236]	; (8001cbc <HAL_TIM_Base_MspInit+0xfc>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d038      	beq.n	8001c44 <HAL_TIM_Base_MspInit+0x84>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM9)
 8001bd2:	4a3b      	ldr	r2, [pc, #236]	; (8001cc0 <HAL_TIM_Base_MspInit+0x100>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d05a      	beq.n	8001c8e <HAL_TIM_Base_MspInit+0xce>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
  else if(htim_base->Instance==TIM10)
 8001bd8:	4a3a      	ldr	r2, [pc, #232]	; (8001cc4 <HAL_TIM_Base_MspInit+0x104>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d005      	beq.n	8001bea <HAL_TIM_Base_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 8001bde:	4a3a      	ldr	r2, [pc, #232]	; (8001cc8 <HAL_TIM_Base_MspInit+0x108>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d045      	beq.n	8001c70 <HAL_TIM_Base_MspInit+0xb0>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001be4:	b007      	add	sp, #28
 8001be6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001bea:	2200      	movs	r2, #0
 8001bec:	4b37      	ldr	r3, [pc, #220]	; (8001ccc <HAL_TIM_Base_MspInit+0x10c>)
 8001bee:	9204      	str	r2, [sp, #16]
 8001bf0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001bf2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001bf6:	6459      	str	r1, [r3, #68]	; 0x44
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001c00:	2019      	movs	r0, #25
 8001c02:	4611      	mov	r1, r2
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c04:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001c06:	f000 fab5 	bl	8002174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c0a:	2019      	movs	r0, #25
}
 8001c0c:	b007      	add	sp, #28
 8001c0e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c12:	f000 baed 	b.w	80021f0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c16:	2200      	movs	r2, #0
 8001c18:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001c1c:	9201      	str	r2, [sp, #4]
 8001c1e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001c20:	f041 0101 	orr.w	r1, r1, #1
 8001c24:	6419      	str	r1, [r3, #64]	; 0x40
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c2e:	201c      	movs	r0, #28
 8001c30:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c32:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c34:	f000 fa9e 	bl	8002174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c38:	201c      	movs	r0, #28
}
 8001c3a:	b007      	add	sp, #28
 8001c3c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c40:	f000 bad6 	b.w	80021f0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c44:	2200      	movs	r2, #0
 8001c46:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <HAL_TIM_Base_MspInit+0x10c>)
 8001c48:	9202      	str	r2, [sp, #8]
 8001c4a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001c4c:	f041 0108 	orr.w	r1, r1, #8
 8001c50:	6419      	str	r1, [r3, #64]	; 0x40
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001c5a:	2032      	movs	r0, #50	; 0x32
 8001c5c:	4611      	mov	r1, r2
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c5e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001c60:	f000 fa88 	bl	8002174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c64:	2032      	movs	r0, #50	; 0x32
}
 8001c66:	b007      	add	sp, #28
 8001c68:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c6c:	f000 bac0 	b.w	80021f0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001c70:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_TIM_Base_MspInit+0x10c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	9205      	str	r2, [sp, #20]
 8001c76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c78:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c7c:	645a      	str	r2, [r3, #68]	; 0x44
 8001c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c84:	9305      	str	r3, [sp, #20]
 8001c86:	9b05      	ldr	r3, [sp, #20]
}
 8001c88:	b007      	add	sp, #28
 8001c8a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001c8e:	2200      	movs	r2, #0
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <HAL_TIM_Base_MspInit+0x10c>)
 8001c92:	9203      	str	r2, [sp, #12]
 8001c94:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001c96:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001c9a:	6459      	str	r1, [r3, #68]	; 0x44
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca2:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001ca4:	2018      	movs	r0, #24
 8001ca6:	4611      	mov	r1, r2
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001ca8:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001caa:	f000 fa63 	bl	8002174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001cae:	2018      	movs	r0, #24
}
 8001cb0:	b007      	add	sp, #28
 8001cb2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001cb6:	f000 ba9b 	b.w	80021f0 <HAL_NVIC_EnableIRQ>
 8001cba:	bf00      	nop
 8001cbc:	40000c00 	.word	0x40000c00
 8001cc0:	40014000 	.word	0x40014000
 8001cc4:	40014400 	.word	0x40014400
 8001cc8:	40014800 	.word	0x40014800
 8001ccc:	40023800 	.word	0x40023800

08001cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd0:	e7fe      	b.n	8001cd0 <NMI_Handler>
 8001cd2:	bf00      	nop

08001cd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd4:	e7fe      	b.n	8001cd4 <HardFault_Handler>
 8001cd6:	bf00      	nop

08001cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd8:	e7fe      	b.n	8001cd8 <MemManage_Handler>
 8001cda:	bf00      	nop

08001cdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cdc:	e7fe      	b.n	8001cdc <BusFault_Handler>
 8001cde:	bf00      	nop

08001ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce0:	e7fe      	b.n	8001ce0 <UsageFault_Handler>
 8001ce2:	bf00      	nop

08001ce4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop

08001ce8 <DebugMon_Handler>:
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop

08001cec <PendSV_Handler>:
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop

08001cf0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf0:	f000 b89e 	b.w	8001e30 <HAL_IncTick>

08001cf4 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f000 bca1 	b.w	800263c <HAL_GPIO_EXTI_IRQHandler>
 8001cfa:	bf00      	nop

08001cfc <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001cfc:	2002      	movs	r0, #2
 8001cfe:	f000 bc9d 	b.w	800263c <HAL_GPIO_EXTI_IRQHandler>
 8001d02:	bf00      	nop

08001d04 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001d04:	2004      	movs	r0, #4
 8001d06:	f000 bc99 	b.w	800263c <HAL_GPIO_EXTI_IRQHandler>
 8001d0a:	bf00      	nop

08001d0c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001d0c:	2010      	movs	r0, #16
 8001d0e:	f000 bc95 	b.w	800263c <HAL_GPIO_EXTI_IRQHandler>
 8001d12:	bf00      	nop

08001d14 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001d14:	2040      	movs	r0, #64	; 0x40
 8001d16:	f000 bc91 	b.w	800263c <HAL_GPIO_EXTI_IRQHandler>
 8001d1a:	bf00      	nop

08001d1c <TIM1_BRK_TIM9_IRQHandler>:
void TIM1_BRK_TIM9_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001d1c:	4801      	ldr	r0, [pc, #4]	; (8001d24 <TIM1_BRK_TIM9_IRQHandler+0x8>)
 8001d1e:	f001 bb3b 	b.w	8003398 <HAL_TIM_IRQHandler>
 8001d22:	bf00      	nop
 8001d24:	200002bc 	.word	0x200002bc

08001d28 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001d28:	4801      	ldr	r0, [pc, #4]	; (8001d30 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8001d2a:	f001 bb35 	b.w	8003398 <HAL_TIM_IRQHandler>
 8001d2e:	bf00      	nop
 8001d30:	2000019c 	.word	0x2000019c

08001d34 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d34:	4801      	ldr	r0, [pc, #4]	; (8001d3c <TIM2_IRQHandler+0x8>)
 8001d36:	f001 bb2f 	b.w	8003398 <HAL_TIM_IRQHandler>
 8001d3a:	bf00      	nop
 8001d3c:	2000022c 	.word	0x2000022c

08001d40 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001d40:	4801      	ldr	r0, [pc, #4]	; (8001d48 <TIM5_IRQHandler+0x8>)
 8001d42:	f001 bb29 	b.w	8003398 <HAL_TIM_IRQHandler>
 8001d46:	bf00      	nop
 8001d48:	20000274 	.word	0x20000274

08001d4c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d4c:	4a03      	ldr	r2, [pc, #12]	; (8001d5c <SystemInit+0x10>)
 8001d4e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d64:	480d      	ldr	r0, [pc, #52]	; (8001d9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d66:	490e      	ldr	r1, [pc, #56]	; (8001da0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d68:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d6c:	e002      	b.n	8001d74 <LoopCopyDataInit>

08001d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d72:	3304      	adds	r3, #4

08001d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d78:	d3f9      	bcc.n	8001d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7a:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d7c:	4c0b      	ldr	r4, [pc, #44]	; (8001dac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d80:	e001      	b.n	8001d86 <LoopFillZerobss>

08001d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d84:	3204      	adds	r2, #4

08001d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d88:	d3fb      	bcc.n	8001d82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d8a:	f7ff ffdf 	bl	8001d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d8e:	f001 fbed 	bl	800356c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d92:	f7ff f801 	bl	8000d98 <main>
  bx  lr    
 8001d96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da0:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001da4:	08003608 	.word	0x08003608
  ldr r2, =_sbss
 8001da8:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001dac:	200003e0 	.word	0x200003e0

08001db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db0:	e7fe      	b.n	8001db0 <ADC_IRQHandler>
	...

08001db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db6:	4a0e      	ldr	r2, [pc, #56]	; (8001df0 <HAL_InitTick+0x3c>)
 8001db8:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <HAL_InitTick+0x40>)
 8001dba:	7812      	ldrb	r2, [r2, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
{
 8001dbe:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dc4:	fbb0 f0f2 	udiv	r0, r0, r2
 8001dc8:	fbb3 f0f0 	udiv	r0, r3, r0
 8001dcc:	f000 fa1e 	bl	800220c <HAL_SYSTICK_Config>
 8001dd0:	b908      	cbnz	r0, 8001dd6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd2:	2d0f      	cmp	r5, #15
 8001dd4:	d901      	bls.n	8001dda <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001dd6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001dd8:	bd38      	pop	{r3, r4, r5, pc}
 8001dda:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ddc:	4602      	mov	r2, r0
 8001dde:	4629      	mov	r1, r5
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001de4:	f000 f9c6 	bl	8002174 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <HAL_InitTick+0x44>)
 8001dea:	4620      	mov	r0, r4
 8001dec:	601d      	str	r5, [r3, #0]
}
 8001dee:	bd38      	pop	{r3, r4, r5, pc}
 8001df0:	20000034 	.word	0x20000034
 8001df4:	20000030 	.word	0x20000030
 8001df8:	20000038 	.word	0x20000038

08001dfc <HAL_Init>:
{
 8001dfc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_Init+0x30>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e06:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e0e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e16:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e18:	2003      	movs	r0, #3
 8001e1a:	f000 f999 	bl	8002150 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1e:	200f      	movs	r0, #15
 8001e20:	f7ff ffc8 	bl	8001db4 <HAL_InitTick>
  HAL_MspInit();
 8001e24:	f7ff fe40 	bl	8001aa8 <HAL_MspInit>
}
 8001e28:	2000      	movs	r0, #0
 8001e2a:	bd08      	pop	{r3, pc}
 8001e2c:	40023c00 	.word	0x40023c00

08001e30 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001e30:	4a03      	ldr	r2, [pc, #12]	; (8001e40 <HAL_IncTick+0x10>)
 8001e32:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <HAL_IncTick+0x14>)
 8001e34:	6811      	ldr	r1, [r2, #0]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	440b      	add	r3, r1
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	200003bc 	.word	0x200003bc
 8001e44:	20000034 	.word	0x20000034

08001e48 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e48:	4b01      	ldr	r3, [pc, #4]	; (8001e50 <HAL_GetTick+0x8>)
 8001e4a:	6818      	ldr	r0, [r3, #0]
}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	200003bc 	.word	0x200003bc

08001e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e54:	b538      	push	{r3, r4, r5, lr}
 8001e56:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff fff6 	bl	8001e48 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001e5e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001e60:	d002      	beq.n	8001e68 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e62:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <HAL_Delay+0x20>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e68:	f7ff ffee 	bl	8001e48 <HAL_GetTick>
 8001e6c:	1b43      	subs	r3, r0, r5
 8001e6e:	42a3      	cmp	r3, r4
 8001e70:	d3fa      	bcc.n	8001e68 <HAL_Delay+0x14>
  {
  }
}
 8001e72:	bd38      	pop	{r3, r4, r5, pc}
 8001e74:	20000034 	.word	0x20000034

08001e78 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e78:	2800      	cmp	r0, #0
 8001e7a:	f000 809f 	beq.w	8001fbc <HAL_ADC_Init+0x144>
{
 8001e7e:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e80:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001e82:	4604      	mov	r4, r0
 8001e84:	b13d      	cbz	r5, 8001e96 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e88:	06db      	lsls	r3, r3, #27
 8001e8a:	d50c      	bpl.n	8001ea6 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8001e92:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8001e94:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8001e96:	f7ff fe23 	bl	8001ae0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001e9a:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8001e9e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ea2:	06db      	lsls	r3, r3, #27
 8001ea4:	d4f2      	bmi.n	8001e8c <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8001ea6:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ea8:	4a48      	ldr	r2, [pc, #288]	; (8001fcc <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 8001eaa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eae:	f023 0302 	bic.w	r3, r3, #2
 8001eb2:	f043 0302 	orr.w	r3, r3, #2
 8001eb6:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001eb8:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eba:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ebc:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8001ec0:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ec2:	6851      	ldr	r1, [r2, #4]
 8001ec4:	6860      	ldr	r0, [r4, #4]
 8001ec6:	4301      	orrs	r1, r0
 8001ec8:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eca:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ecc:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ece:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ed4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ed6:	6859      	ldr	r1, [r3, #4]
 8001ed8:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8001edc:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ede:	6859      	ldr	r1, [r3, #4]
 8001ee0:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8001ee4:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	4302      	orrs	r2, r0
 8001eea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001eec:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001eee:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ef0:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8001ef4:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ef6:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ef8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001efa:	4302      	orrs	r2, r0
 8001efc:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001efe:	4a34      	ldr	r2, [pc, #208]	; (8001fd0 <HAL_ADC_Init+0x158>)
 8001f00:	4291      	cmp	r1, r2
 8001f02:	d052      	beq.n	8001faa <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f04:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f06:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f08:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8001f0c:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	4311      	orrs	r1, r2
 8001f12:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f14:	6899      	ldr	r1, [r3, #8]
 8001f16:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8001f1a:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	432a      	orrs	r2, r5
 8001f20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	f022 0202 	bic.w	r2, r2, #2
 8001f28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	7e21      	ldrb	r1, [r4, #24]
 8001f2e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001f32:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f34:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001f38:	2a00      	cmp	r2, #0
 8001f3a:	d041      	beq.n	8001fc0 <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f3c:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f40:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001f44:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f46:	6858      	ldr	r0, [r3, #4]
 8001f48:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8001f4c:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f4e:	1e51      	subs	r1, r2, #1
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001f56:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f5a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f5c:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f66:	3901      	subs	r1, #1
 8001f68:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f6e:	6899      	ldr	r1, [r3, #8]
 8001f70:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8001f74:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f76:	6899      	ldr	r1, [r3, #8]
 8001f78:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8001f7c:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8001f80:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f82:	6899      	ldr	r1, [r3, #8]
 8001f84:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001f88:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f8a:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001f8c:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f8e:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8001f92:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001f94:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001f96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f98:	f023 0303 	bic.w	r3, r3, #3
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001fa8:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	e7b2      	b.n	8001f22 <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8001fbc:	2001      	movs	r0, #1
}
 8001fbe:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	e7c6      	b.n	8001f58 <HAL_ADC_Init+0xe0>
 8001fca:	bf00      	nop
 8001fcc:	40012300 	.word	0x40012300
 8001fd0:	0f000001 	.word	0x0f000001

08001fd4 <HAL_ADC_ConfigChannel>:
{
 8001fd4:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 8001fd6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001fda:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8001fdc:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8001fde:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8001fe0:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001fe2:	f000 809b 	beq.w	800211c <HAL_ADC_ConfigChannel+0x148>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fec:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fee:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ff0:	2c09      	cmp	r4, #9
 8001ff2:	d82d      	bhi.n	8002050 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ff4:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ff6:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ff8:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8001ffc:	f04f 0c07 	mov.w	ip, #7
 8002000:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002004:	ea25 050c 	bic.w	r5, r5, ip
 8002008:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800200a:	691d      	ldr	r5, [r3, #16]
 800200c:	fa02 f20e 	lsl.w	r2, r2, lr
 8002010:	432a      	orrs	r2, r5
 8002012:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 8002014:	684a      	ldr	r2, [r1, #4]
 8002016:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002018:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 800201a:	d82f      	bhi.n	800207c <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800201c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002020:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002022:	3a05      	subs	r2, #5
 8002024:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002028:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800202c:	fa0e f202 	lsl.w	r2, lr, r2
 8002030:	ea21 0202 	bic.w	r2, r1, r2
 8002034:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002038:	ea4c 0202 	orr.w	r2, ip, r2
 800203c:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800203e:	4a3f      	ldr	r2, [pc, #252]	; (800213c <HAL_ADC_ConfigChannel+0x168>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d030      	beq.n	80020a6 <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 8002044:	2300      	movs	r3, #0
 8002046:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800204a:	4618      	mov	r0, r3
}
 800204c:	b003      	add	sp, #12
 800204e:	bd30      	pop	{r4, r5, pc}
 8002050:	fa1f fc84 	uxth.w	ip, r4
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002054:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8002058:	68dd      	ldr	r5, [r3, #12]
 800205a:	f1a2 0e1e 	sub.w	lr, r2, #30
 800205e:	2207      	movs	r2, #7
 8002060:	fa02 f20e 	lsl.w	r2, r2, lr
 8002064:	ea25 0202 	bic.w	r2, r5, r2
 8002068:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800206a:	688a      	ldr	r2, [r1, #8]
 800206c:	68dd      	ldr	r5, [r3, #12]
 800206e:	fa02 f20e 	lsl.w	r2, r2, lr
 8002072:	432a      	orrs	r2, r5
 8002074:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8002076:	684a      	ldr	r2, [r1, #4]
 8002078:	2a06      	cmp	r2, #6
 800207a:	d9cf      	bls.n	800201c <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 800207c:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800207e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 8002082:	d832      	bhi.n	80020ea <HAL_ADC_ConfigChannel+0x116>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002084:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002086:	3a23      	subs	r2, #35	; 0x23
 8002088:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800208a:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800208e:	fa05 f202 	lsl.w	r2, r5, r2
 8002092:	ea21 0202 	bic.w	r2, r1, r2
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800209a:	ea4c 0202 	orr.w	r2, ip, r2
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020a0:	4a26      	ldr	r2, [pc, #152]	; (800213c <HAL_ADC_ConfigChannel+0x168>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d1ce      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x70>
 80020a6:	2c12      	cmp	r4, #18
 80020a8:	d02e      	beq.n	8002108 <HAL_ADC_ConfigChannel+0x134>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020aa:	4b25      	ldr	r3, [pc, #148]	; (8002140 <HAL_ADC_ConfigChannel+0x16c>)
 80020ac:	429c      	cmp	r4, r3
 80020ae:	d138      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x14e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020b0:	4a24      	ldr	r2, [pc, #144]	; (8002144 <HAL_ADC_ConfigChannel+0x170>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020b2:	4b25      	ldr	r3, [pc, #148]	; (8002148 <HAL_ADC_ConfigChannel+0x174>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020b4:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020b6:	4c25      	ldr	r4, [pc, #148]	; (800214c <HAL_ADC_ConfigChannel+0x178>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020b8:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 80020bc:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020be:	6851      	ldr	r1, [r2, #4]
 80020c0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80020c4:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	fba4 2303 	umull	r2, r3, r4, r3
 80020cc:	0c9b      	lsrs	r3, r3, #18
 80020ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80020d6:	9b01      	ldr	r3, [sp, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0b3      	beq.n	8002044 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 80020dc:	9b01      	ldr	r3, [sp, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80020e2:	9b01      	ldr	r3, [sp, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f9      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x108>
 80020e8:	e7ac      	b.n	8002044 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ec:	3a41      	subs	r2, #65	; 0x41
 80020ee:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020f0:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020f4:	fa05 f202 	lsl.w	r2, r5, r2
 80020f8:	ea21 0202 	bic.w	r2, r1, r2
 80020fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002100:	ea4c 0202 	orr.w	r2, ip, r2
 8002104:	62da      	str	r2, [r3, #44]	; 0x2c
 8002106:	e79a      	b.n	800203e <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002108:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <HAL_ADC_ConfigChannel+0x170>)
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002110:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	e793      	b.n	8002044 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 800211c:	2002      	movs	r0, #2
}
 800211e:	b003      	add	sp, #12
 8002120:	bd30      	pop	{r4, r5, pc}
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002122:	2c11      	cmp	r4, #17
 8002124:	d18e      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <HAL_ADC_ConfigChannel+0x170>)
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800212e:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	e784      	b.n	8002044 <HAL_ADC_ConfigChannel+0x70>
 800213a:	bf00      	nop
 800213c:	40012000 	.word	0x40012000
 8002140:	10000012 	.word	0x10000012
 8002144:	40012300 	.word	0x40012300
 8002148:	20000030 	.word	0x20000030
 800214c:	431bde83 	.word	0x431bde83

08002150 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002150:	4907      	ldr	r1, [pc, #28]	; (8002170 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002152:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002154:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002156:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800215a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002160:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002162:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800216a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002174:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <HAL_NVIC_SetPriority+0x74>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800217c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800217e:	f1c3 0e07 	rsb	lr, r3, #7
 8002182:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002186:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800218a:	bf28      	it	cs
 800218c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002190:	f1bc 0f06 	cmp.w	ip, #6
 8002194:	d91b      	bls.n	80021ce <HAL_NVIC_SetPriority+0x5a>
 8002196:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002198:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800219c:	fa0c fc03 	lsl.w	ip, ip, r3
 80021a0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80021a8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80021ac:	ea21 010c 	bic.w	r1, r1, ip
 80021b0:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80021b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80021b8:	db0c      	blt.n	80021d4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ba:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80021be:	0109      	lsls	r1, r1, #4
 80021c0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80021c4:	b2c9      	uxtb	r1, r1
 80021c6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80021ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80021ce:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d0:	4613      	mov	r3, r2
 80021d2:	e7e7      	b.n	80021a4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_NVIC_SetPriority+0x78>)
 80021d6:	f000 000f 	and.w	r0, r0, #15
 80021da:	0109      	lsls	r1, r1, #4
 80021dc:	4403      	add	r3, r0
 80021de:	b2c9      	uxtb	r1, r1
 80021e0:	7619      	strb	r1, [r3, #24]
 80021e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80021e6:	bf00      	nop
 80021e8:	e000ed00 	.word	0xe000ed00
 80021ec:	e000ecfc 	.word	0xe000ecfc

080021f0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80021f0:	2800      	cmp	r0, #0
 80021f2:	db08      	blt.n	8002206 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f4:	0941      	lsrs	r1, r0, #5
 80021f6:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_NVIC_EnableIRQ+0x18>)
 80021f8:	f000 001f 	and.w	r0, r0, #31
 80021fc:	2301      	movs	r3, #1
 80021fe:	fa03 f000 	lsl.w	r0, r3, r0
 8002202:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002206:	4770      	bx	lr
 8002208:	e000e100 	.word	0xe000e100

0800220c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800220c:	3801      	subs	r0, #1
 800220e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002212:	d210      	bcs.n	8002236 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002214:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002216:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221a:	4c08      	ldr	r4, [pc, #32]	; (800223c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8002222:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002226:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002228:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800222a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800222c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800222e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002232:	6119      	str	r1, [r3, #16]
 8002234:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002236:	2001      	movs	r0, #1
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002240:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <FLASH_SetErrorCode+0x88>)
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	06d0      	lsls	r0, r2, #27
 8002246:	d505      	bpl.n	8002254 <FLASH_SetErrorCode+0x14>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002248:	4920      	ldr	r1, [pc, #128]	; (80022cc <FLASH_SetErrorCode+0x8c>)
 800224a:	69ca      	ldr	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800224c:	2010      	movs	r0, #16
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800224e:	4302      	orrs	r2, r0
 8002250:	61ca      	str	r2, [r1, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002252:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002254:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <FLASH_SetErrorCode+0x88>)
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	0691      	lsls	r1, r2, #26
 800225a:	d506      	bpl.n	800226a <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800225c:	491b      	ldr	r1, [pc, #108]	; (80022cc <FLASH_SetErrorCode+0x8c>)
 800225e:	69ca      	ldr	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002260:	2020      	movs	r0, #32
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002262:	f042 0208 	orr.w	r2, r2, #8
 8002266:	61ca      	str	r2, [r1, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002268:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800226a:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <FLASH_SetErrorCode+0x88>)
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	0652      	lsls	r2, r2, #25
 8002270:	d506      	bpl.n	8002280 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002272:	4916      	ldr	r1, [pc, #88]	; (80022cc <FLASH_SetErrorCode+0x8c>)
 8002274:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002276:	2040      	movs	r0, #64	; 0x40
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002278:	f042 0204 	orr.w	r2, r2, #4
 800227c:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800227e:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002280:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <FLASH_SetErrorCode+0x88>)
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	0610      	lsls	r0, r2, #24
 8002286:	d506      	bpl.n	8002296 <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002288:	4910      	ldr	r1, [pc, #64]	; (80022cc <FLASH_SetErrorCode+0x8c>)
 800228a:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800228c:	2080      	movs	r0, #128	; 0x80
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800228e:	f042 0202 	orr.w	r2, r2, #2
 8002292:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002294:	60d8      	str	r0, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <FLASH_SetErrorCode+0x88>)
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	05d1      	lsls	r1, r2, #23
 800229c:	d507      	bpl.n	80022ae <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800229e:	490b      	ldr	r1, [pc, #44]	; (80022cc <FLASH_SetErrorCode+0x8c>)
 80022a0:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80022a2:	f44f 7080 	mov.w	r0, #256	; 0x100
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80022a6:	f042 0201 	orr.w	r2, r2, #1
 80022aa:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80022ac:	60d8      	str	r0, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <FLASH_SetErrorCode+0x88>)
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	0792      	lsls	r2, r2, #30
 80022b4:	d506      	bpl.n	80022c4 <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80022b6:	4905      	ldr	r1, [pc, #20]	; (80022cc <FLASH_SetErrorCode+0x8c>)
 80022b8:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80022ba:	2002      	movs	r0, #2
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80022bc:	f042 0220 	orr.w	r2, r2, #32
 80022c0:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80022c2:	60d8      	str	r0, [r3, #12]
  }
}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40023c00 	.word	0x40023c00
 80022cc:	200003c0 	.word	0x200003c0

080022d0 <HAL_FLASH_Program>:
{
 80022d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80022d4:	4f4d      	ldr	r7, [pc, #308]	; (800240c <HAL_FLASH_Program+0x13c>)
{
 80022d6:	469b      	mov	fp, r3
  __HAL_LOCK(&pFlash);
 80022d8:	7e3b      	ldrb	r3, [r7, #24]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d060      	beq.n	80023a0 <HAL_FLASH_Program+0xd0>
 80022de:	2301      	movs	r3, #1
 80022e0:	763b      	strb	r3, [r7, #24]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	4681      	mov	r9, r0
 80022e6:	468a      	mov	sl, r1
 80022e8:	4690      	mov	r8, r2
 80022ea:	61fb      	str	r3, [r7, #28]
  tickstart = HAL_GetTick();
 80022ec:	f7ff fdac 	bl	8001e48 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80022f0:	4d47      	ldr	r5, [pc, #284]	; (8002410 <HAL_FLASH_Program+0x140>)
  tickstart = HAL_GetTick();
 80022f2:	4604      	mov	r4, r0
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80022f4:	f24c 3650 	movw	r6, #50000	; 0xc350
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80022f8:	e004      	b.n	8002304 <HAL_FLASH_Program+0x34>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80022fa:	f7ff fda5 	bl	8001e48 <HAL_GetTick>
 80022fe:	1b00      	subs	r0, r0, r4
 8002300:	42b0      	cmp	r0, r6
 8002302:	d848      	bhi.n	8002396 <HAL_FLASH_Program+0xc6>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002304:	68eb      	ldr	r3, [r5, #12]
 8002306:	03d8      	lsls	r0, r3, #15
 8002308:	d4f7      	bmi.n	80022fa <HAL_FLASH_Program+0x2a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800230a:	68eb      	ldr	r3, [r5, #12]
 800230c:	07d9      	lsls	r1, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800230e:	bf44      	itt	mi
 8002310:	2301      	movmi	r3, #1
 8002312:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002314:	4b3e      	ldr	r3, [pc, #248]	; (8002410 <HAL_FLASH_Program+0x140>)
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	f412 7ff9 	tst.w	r2, #498	; 0x1f2
 800231c:	d154      	bne.n	80023c8 <HAL_FLASH_Program+0xf8>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800231e:	f1b9 0f00 	cmp.w	r9, #0
 8002322:	d040      	beq.n	80023a6 <HAL_FLASH_Program+0xd6>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002324:	f1b9 0f01 	cmp.w	r9, #1
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002328:	691a      	ldr	r2, [r3, #16]
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800232a:	d051      	beq.n	80023d0 <HAL_FLASH_Program+0x100>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800232c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002330:	611a      	str	r2, [r3, #16]
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002332:	f1b9 0f02 	cmp.w	r9, #2
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002336:	691a      	ldr	r2, [r3, #16]
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002338:	d05e      	beq.n	80023f8 <HAL_FLASH_Program+0x128>
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800233a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800233e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002348:	f8ca 8000 	str.w	r8, [sl]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800234c:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002350:	f8ca b004 	str.w	fp, [sl, #4]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
  tickstart = HAL_GetTick();
 8002358:	f7ff fd76 	bl	8001e48 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800235c:	4d2c      	ldr	r5, [pc, #176]	; (8002410 <HAL_FLASH_Program+0x140>)
  tickstart = HAL_GetTick();
 800235e:	4604      	mov	r4, r0
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002360:	f24c 3650 	movw	r6, #50000	; 0xc350
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002364:	e004      	b.n	8002370 <HAL_FLASH_Program+0xa0>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002366:	f7ff fd6f 	bl	8001e48 <HAL_GetTick>
 800236a:	1b00      	subs	r0, r0, r4
 800236c:	42b0      	cmp	r0, r6
 800236e:	d829      	bhi.n	80023c4 <HAL_FLASH_Program+0xf4>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002370:	68eb      	ldr	r3, [r5, #12]
 8002372:	03da      	lsls	r2, r3, #15
 8002374:	d4f7      	bmi.n	8002366 <HAL_FLASH_Program+0x96>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002376:	68eb      	ldr	r3, [r5, #12]
 8002378:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800237a:	bf44      	itt	mi
 800237c:	2301      	movmi	r3, #1
 800237e:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002380:	4b23      	ldr	r3, [pc, #140]	; (8002410 <HAL_FLASH_Program+0x140>)
 8002382:	68d8      	ldr	r0, [r3, #12]
 8002384:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 8002388:	d132      	bne.n	80023f0 <HAL_FLASH_Program+0x120>
    FLASH->CR &= (~FLASH_CR_PG);  
 800238a:	4a21      	ldr	r2, [pc, #132]	; (8002410 <HAL_FLASH_Program+0x140>)
 800238c:	6913      	ldr	r3, [r2, #16]
 800238e:	f023 0301 	bic.w	r3, r3, #1
 8002392:	6113      	str	r3, [r2, #16]
 8002394:	e000      	b.n	8002398 <HAL_FLASH_Program+0xc8>
 8002396:	2003      	movs	r0, #3
  __HAL_UNLOCK(&pFlash);
 8002398:	2300      	movs	r3, #0
 800239a:	763b      	strb	r3, [r7, #24]
}
 800239c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 80023a0:	2002      	movs	r0, #2
}
 80023a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023a6:	6919      	ldr	r1, [r3, #16]
 80023a8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80023ac:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80023b2:	6919      	ldr	r1, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80023b4:	fa5f f888 	uxtb.w	r8, r8
  FLASH->CR |= FLASH_CR_PG;
 80023b8:	f041 0101 	orr.w	r1, r1, #1
 80023bc:	6119      	str	r1, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 80023be:	f88a 8000 	strb.w	r8, [sl]
}
 80023c2:	e7c7      	b.n	8002354 <HAL_FLASH_Program+0x84>
        return HAL_TIMEOUT;
 80023c4:	2003      	movs	r0, #3
 80023c6:	e7e0      	b.n	800238a <HAL_FLASH_Program+0xba>
    FLASH_SetErrorCode();
 80023c8:	f7ff ff3a 	bl	8002240 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80023cc:	2001      	movs	r0, #1
 80023ce:	e7e3      	b.n	8002398 <HAL_FLASH_Program+0xc8>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80023d4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023dc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80023de:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80023e0:	fa1f f888 	uxth.w	r8, r8
  FLASH->CR |= FLASH_CR_PG;
 80023e4:	f042 0201 	orr.w	r2, r2, #1
 80023e8:	611a      	str	r2, [r3, #16]
  *(__IO uint16_t*)Address = Data;
 80023ea:	f8aa 8000 	strh.w	r8, [sl]
}
 80023ee:	e7b1      	b.n	8002354 <HAL_FLASH_Program+0x84>
    FLASH_SetErrorCode();
 80023f0:	f7ff ff26 	bl	8002240 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80023f4:	2001      	movs	r0, #1
 80023f6:	e7c8      	b.n	800238a <HAL_FLASH_Program+0xba>
  FLASH->CR |= FLASH_PSIZE_WORD;
 80023f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	f042 0201 	orr.w	r2, r2, #1
 8002404:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = Data;
 8002406:	f8ca 8000 	str.w	r8, [sl]
}
 800240a:	e7a3      	b.n	8002354 <HAL_FLASH_Program+0x84>
 800240c:	200003c0 	.word	0x200003c0
 8002410:	40023c00 	.word	0x40023c00

08002414 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_FLASH_Unlock+0x1c>)
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	2a00      	cmp	r2, #0
 800241a:	db01      	blt.n	8002420 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800241c:	2000      	movs	r0, #0
}
 800241e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002420:	4904      	ldr	r1, [pc, #16]	; (8002434 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002422:	4a05      	ldr	r2, [pc, #20]	; (8002438 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002424:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002426:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002428:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800242a:	0fc0      	lsrs	r0, r0, #31
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40023c00 	.word	0x40023c00
 8002434:	45670123 	.word	0x45670123
 8002438:	cdef89ab 	.word	0xcdef89ab

0800243c <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800243c:	4a03      	ldr	r2, [pc, #12]	; (800244c <HAL_FLASH_Lock+0x10>)
 800243e:	6913      	ldr	r3, [r2, #16]
 8002440:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
}
 8002444:	2000      	movs	r0, #0
  FLASH->CR |= FLASH_CR_LOCK;
 8002446:	6113      	str	r3, [r2, #16]
}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40023c00 	.word	0x40023c00

08002450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002454:	2200      	movs	r2, #0
 8002456:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002458:	4e70      	ldr	r6, [pc, #448]	; (800261c <HAL_GPIO_Init+0x1cc>)
{
 800245a:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245c:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 800245e:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002462:	4689      	mov	r9, r1
 8002464:	e004      	b.n	8002470 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002466:	3301      	adds	r3, #1
 8002468:	2b10      	cmp	r3, #16
 800246a:	f102 0202 	add.w	r2, r2, #2
 800246e:	d078      	beq.n	8002562 <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 8002470:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002474:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8002478:	43a1      	bics	r1, r4
 800247a:	d1f4      	bne.n	8002466 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247c:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8002480:	f00c 0103 	and.w	r1, ip, #3
 8002484:	1e4d      	subs	r5, r1, #1
 8002486:	2d01      	cmp	r5, #1
 8002488:	d96e      	bls.n	8002568 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800248a:	2903      	cmp	r1, #3
 800248c:	f040 80ae 	bne.w	80025ec <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002490:	4091      	lsls	r1, r2
 8002492:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8002494:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002496:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002498:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800249a:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 800249e:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024a0:	d0e1      	beq.n	8002466 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a2:	4d5f      	ldr	r5, [pc, #380]	; (8002620 <HAL_GPIO_Init+0x1d0>)
 80024a4:	2100      	movs	r1, #0
 80024a6:	9103      	str	r1, [sp, #12]
 80024a8:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80024aa:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80024ae:	6469      	str	r1, [r5, #68]	; 0x44
 80024b0:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80024b2:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80024b6:	9103      	str	r1, [sp, #12]
 80024b8:	9903      	ldr	r1, [sp, #12]
 80024ba:	f023 0103 	bic.w	r1, r3, #3
 80024be:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80024c2:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024c6:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80024ca:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024ce:	00bf      	lsls	r7, r7, #2
 80024d0:	250f      	movs	r5, #15
 80024d2:	40bd      	lsls	r5, r7
 80024d4:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024d8:	4d52      	ldr	r5, [pc, #328]	; (8002624 <HAL_GPIO_Init+0x1d4>)
 80024da:	42a8      	cmp	r0, r5
 80024dc:	d017      	beq.n	800250e <HAL_GPIO_Init+0xbe>
 80024de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024e2:	42a8      	cmp	r0, r5
 80024e4:	f000 8086 	beq.w	80025f4 <HAL_GPIO_Init+0x1a4>
 80024e8:	4d4f      	ldr	r5, [pc, #316]	; (8002628 <HAL_GPIO_Init+0x1d8>)
 80024ea:	42a8      	cmp	r0, r5
 80024ec:	f000 8087 	beq.w	80025fe <HAL_GPIO_Init+0x1ae>
 80024f0:	4d4e      	ldr	r5, [pc, #312]	; (800262c <HAL_GPIO_Init+0x1dc>)
 80024f2:	42a8      	cmp	r0, r5
 80024f4:	f000 808a 	beq.w	800260c <HAL_GPIO_Init+0x1bc>
 80024f8:	4d4d      	ldr	r5, [pc, #308]	; (8002630 <HAL_GPIO_Init+0x1e0>)
 80024fa:	42a8      	cmp	r0, r5
 80024fc:	bf0c      	ite	eq
 80024fe:	f04f 0e04 	moveq.w	lr, #4
 8002502:	f04f 0e07 	movne.w	lr, #7
 8002506:	fa0e f707 	lsl.w	r7, lr, r7
 800250a:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800250e:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8002512:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8002514:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002518:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800251c:	bf0c      	ite	eq
 800251e:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8002520:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8002524:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8002526:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002528:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 800252c:	bf0c      	ite	eq
 800252e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002530:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8002534:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8002536:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002538:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800253c:	bf0c      	ite	eq
 800253e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002540:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8002544:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002546:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002548:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254c:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8002550:	bf0c      	ite	eq
 8002552:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8002554:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002558:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 800255a:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800255c:	f102 0202 	add.w	r2, r2, #2
 8002560:	d186      	bne.n	8002470 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002562:	b005      	add	sp, #20
 8002564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002568:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 800256c:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800256e:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002572:	2503      	movs	r5, #3
 8002574:	fa05 fe02 	lsl.w	lr, r5, r2
 8002578:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 800257c:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8002580:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002582:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002584:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002588:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800258c:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8002590:	409f      	lsls	r7, r3
 8002592:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002596:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002598:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800259a:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800259e:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80025a2:	4097      	lsls	r7, r2
 80025a4:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a8:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 80025aa:	60c7      	str	r7, [r0, #12]
 80025ac:	fa01 f102 	lsl.w	r1, r1, r2
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b0:	f47f af70 	bne.w	8002494 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 80025b4:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80025b8:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025bc:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80025c0:	f8de 7020 	ldr.w	r7, [lr, #32]
 80025c4:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025c6:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ca:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025ce:	fa07 f708 	lsl.w	r7, r7, r8
 80025d2:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025d4:	270f      	movs	r7, #15
 80025d6:	fa07 f808 	lsl.w	r8, r7, r8
 80025da:	9f00      	ldr	r7, [sp, #0]
 80025dc:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025e0:	9f01      	ldr	r7, [sp, #4]
 80025e2:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 80025e6:	f8ce 7020 	str.w	r7, [lr, #32]
 80025ea:	e753      	b.n	8002494 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ec:	2503      	movs	r5, #3
 80025ee:	4095      	lsls	r5, r2
 80025f0:	43ed      	mvns	r5, r5
 80025f2:	e7d1      	b.n	8002598 <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025f4:	fa0a f707 	lsl.w	r7, sl, r7
 80025f8:	ea48 0807 	orr.w	r8, r8, r7
 80025fc:	e787      	b.n	800250e <HAL_GPIO_Init+0xbe>
 80025fe:	f04f 0e02 	mov.w	lr, #2
 8002602:	fa0e f707 	lsl.w	r7, lr, r7
 8002606:	ea48 0807 	orr.w	r8, r8, r7
 800260a:	e780      	b.n	800250e <HAL_GPIO_Init+0xbe>
 800260c:	f04f 0e03 	mov.w	lr, #3
 8002610:	fa0e f707 	lsl.w	r7, lr, r7
 8002614:	ea48 0807 	orr.w	r8, r8, r7
 8002618:	e779      	b.n	800250e <HAL_GPIO_Init+0xbe>
 800261a:	bf00      	nop
 800261c:	40013c00 	.word	0x40013c00
 8002620:	40023800 	.word	0x40023800
 8002624:	40020000 	.word	0x40020000
 8002628:	40020800 	.word	0x40020800
 800262c:	40020c00 	.word	0x40020c00
 8002630:	40021000 	.word	0x40021000

08002634 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002634:	b902      	cbnz	r2, 8002638 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002636:	0409      	lsls	r1, r1, #16
 8002638:	6181      	str	r1, [r0, #24]
  }
}
 800263a:	4770      	bx	lr

0800263c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800263c:	4a04      	ldr	r2, [pc, #16]	; (8002650 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800263e:	6951      	ldr	r1, [r2, #20]
 8002640:	4201      	tst	r1, r0
 8002642:	d100      	bne.n	8002646 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002644:	4770      	bx	lr
{
 8002646:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002648:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800264a:	f7ff f9d7 	bl	80019fc <HAL_GPIO_EXTI_Callback>
  }
}
 800264e:	bd08      	pop	{r3, pc}
 8002650:	40013c00 	.word	0x40013c00

08002654 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002654:	2800      	cmp	r0, #0
 8002656:	f000 80b9 	beq.w	80027cc <HAL_I2C_Init+0x178>
{
 800265a:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800265c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002660:	4604      	mov	r4, r0
 8002662:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8098 	beq.w	800279c <HAL_I2C_Init+0x148>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800266c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800266e:	2224      	movs	r2, #36	; 0x24
 8002670:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002682:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800268a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800268c:	f000 fcf2 	bl	8003074 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002690:	6863      	ldr	r3, [r4, #4]
 8002692:	494f      	ldr	r1, [pc, #316]	; (80027d0 <HAL_I2C_Init+0x17c>)
 8002694:	428b      	cmp	r3, r1
 8002696:	d84f      	bhi.n	8002738 <HAL_I2C_Init+0xe4>
 8002698:	4a4e      	ldr	r2, [pc, #312]	; (80027d4 <HAL_I2C_Init+0x180>)
 800269a:	4290      	cmp	r0, r2
 800269c:	d97c      	bls.n	8002798 <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800269e:	4d4e      	ldr	r5, [pc, #312]	; (80027d8 <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026a0:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 80026a2:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026a6:	1e43      	subs	r3, r0, #1
 80026a8:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026ac:	6822      	ldr	r2, [r4, #0]
 80026ae:	6850      	ldr	r0, [r2, #4]
 80026b0:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80026b4:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 80026b8:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80026ba:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026bc:	f101 0c01 	add.w	ip, r1, #1
 80026c0:	6a11      	ldr	r1, [r2, #32]
 80026c2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80026c6:	ea41 010c 	orr.w	r1, r1, ip
 80026ca:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026cc:	69d1      	ldr	r1, [r2, #28]
 80026ce:	f640 7efc 	movw	lr, #4092	; 0xffc
 80026d2:	3301      	adds	r3, #1
 80026d4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80026d8:	ea13 0f0e 	tst.w	r3, lr
 80026dc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80026e0:	d161      	bne.n	80027a6 <HAL_I2C_Init+0x152>
 80026e2:	2304      	movs	r3, #4
 80026e4:	430b      	orrs	r3, r1
 80026e6:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026e8:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80026ec:	6811      	ldr	r1, [r2, #0]
 80026ee:	4303      	orrs	r3, r0
 80026f0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80026f4:	430b      	orrs	r3, r1
 80026f6:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026f8:	6891      	ldr	r1, [r2, #8]
 80026fa:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80026fe:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002702:	4303      	orrs	r3, r0
 8002704:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002708:	430b      	orrs	r3, r1
 800270a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800270c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002710:	68d1      	ldr	r1, [r2, #12]
 8002712:	4303      	orrs	r3, r0
 8002714:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002718:	430b      	orrs	r3, r1
 800271a:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800271c:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800271e:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8002720:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8002724:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 8002726:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002728:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800272a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800272e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002730:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

  return HAL_OK;
 8002734:	4618      	mov	r0, r3
}
 8002736:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002738:	4a28      	ldr	r2, [pc, #160]	; (80027dc <HAL_I2C_Init+0x188>)
 800273a:	4290      	cmp	r0, r2
 800273c:	d92c      	bls.n	8002798 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 800273e:	4d26      	ldr	r5, [pc, #152]	; (80027d8 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002740:	4e27      	ldr	r6, [pc, #156]	; (80027e0 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8002742:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002746:	6822      	ldr	r2, [r4, #0]
 8002748:	6855      	ldr	r5, [r2, #4]
 800274a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800274e:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8002752:	6055      	str	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002754:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002758:	f44f 7596 	mov.w	r5, #300	; 0x12c
 800275c:	fb05 f101 	mul.w	r1, r5, r1
 8002760:	fba6 5101 	umull	r5, r1, r6, r1
 8002764:	6a15      	ldr	r5, [r2, #32]
 8002766:	0989      	lsrs	r1, r1, #6
 8002768:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800276c:	3101      	adds	r1, #1
 800276e:	4329      	orrs	r1, r5
 8002770:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002772:	69d1      	ldr	r1, [r2, #28]
 8002774:	68a5      	ldr	r5, [r4, #8]
 8002776:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800277a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800277e:	b9ad      	cbnz	r5, 80027ac <HAL_I2C_Init+0x158>
 8002780:	3801      	subs	r0, #1
 8002782:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002786:	fbb0 f3f3 	udiv	r3, r0, r3
 800278a:	3301      	adds	r3, #1
 800278c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002790:	b1d3      	cbz	r3, 80027c8 <HAL_I2C_Init+0x174>
 8002792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002796:	e7a5      	b.n	80026e4 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002798:	2001      	movs	r0, #1
}
 800279a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800279c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80027a0:	f7ff f9d6 	bl	8001b50 <HAL_I2C_MspInit>
 80027a4:	e762      	b.n	800266c <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027aa:	e79b      	b.n	80026e4 <HAL_I2C_Init+0x90>
 80027ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027b0:	3801      	subs	r0, #1
 80027b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ba:	3301      	adds	r3, #1
 80027bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c0:	b113      	cbz	r3, 80027c8 <HAL_I2C_Init+0x174>
 80027c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027c6:	e78d      	b.n	80026e4 <HAL_I2C_Init+0x90>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e78b      	b.n	80026e4 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80027cc:	2001      	movs	r0, #1
}
 80027ce:	4770      	bx	lr
 80027d0:	000186a0 	.word	0x000186a0
 80027d4:	001e847f 	.word	0x001e847f
 80027d8:	431bde83 	.word	0x431bde83
 80027dc:	003d08ff 	.word	0x003d08ff
 80027e0:	10624dd3 	.word	0x10624dd3

080027e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027e8:	4605      	mov	r5, r0
 80027ea:	b083      	sub	sp, #12
 80027ec:	4699      	mov	r9, r3
 80027ee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80027f0:	4688      	mov	r8, r1
 80027f2:	4692      	mov	sl, r2
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027f4:	f7ff fb28 	bl	8001e48 <HAL_GetTick>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f8:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d003      	beq.n	8002808 <HAL_I2C_Master_Transmit+0x24>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
    {
      return HAL_BUSY;
 8002800:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002802:	b003      	add	sp, #12
 8002804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002808:	4606      	mov	r6, r0
 800280a:	e005      	b.n	8002818 <HAL_I2C_Master_Transmit+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280c:	f7ff fb1c 	bl	8001e48 <HAL_GetTick>
 8002810:	1b80      	subs	r0, r0, r6
 8002812:	2819      	cmp	r0, #25
 8002814:	f200 80f5 	bhi.w	8002a02 <HAL_I2C_Master_Transmit+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002818:	682c      	ldr	r4, [r5, #0]
 800281a:	69a3      	ldr	r3, [r4, #24]
 800281c:	ea6f 0c03 	mvn.w	ip, r3
 8002820:	f01c 0b02 	ands.w	fp, ip, #2
 8002824:	d0f2      	beq.n	800280c <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 8002826:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800282a:	2b01      	cmp	r3, #1
 800282c:	d0e8      	beq.n	8002800 <HAL_I2C_Master_Transmit+0x1c>
 800282e:	2301      	movs	r3, #1
 8002830:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002834:	6823      	ldr	r3, [r4, #0]
 8002836:	07d9      	lsls	r1, r3, #31
 8002838:	d56f      	bpl.n	800291a <HAL_I2C_Master_Transmit+0x136>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800283a:	6823      	ldr	r3, [r4, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800283c:	4a97      	ldr	r2, [pc, #604]	; (8002a9c <HAL_I2C_Master_Transmit+0x2b8>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800283e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002842:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002844:	2321      	movs	r3, #33	; 0x21
 8002846:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800284a:	2310      	movs	r3, #16
 800284c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002850:	2300      	movs	r3, #0
 8002852:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002854:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002858:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800285a:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800285c:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800285e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8002860:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002864:	2b08      	cmp	r3, #8
 8002866:	d006      	beq.n	8002876 <HAL_I2C_Master_Transmit+0x92>
 8002868:	2b01      	cmp	r3, #1
 800286a:	d004      	beq.n	8002876 <HAL_I2C_Master_Transmit+0x92>
 800286c:	4293      	cmp	r3, r2
 800286e:	d002      	beq.n	8002876 <HAL_I2C_Master_Transmit+0x92>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002870:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002872:	2b12      	cmp	r3, #18
 8002874:	d103      	bne.n	800287e <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287c:	6023      	str	r3, [r4, #0]
 800287e:	1c7b      	adds	r3, r7, #1
 8002880:	d13d      	bne.n	80028fe <HAL_I2C_Master_Transmit+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002882:	6963      	ldr	r3, [r4, #20]
 8002884:	07d8      	lsls	r0, r3, #31
 8002886:	d5fc      	bpl.n	8002882 <HAL_I2C_Master_Transmit+0x9e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002888:	692b      	ldr	r3, [r5, #16]
 800288a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800288e:	d149      	bne.n	8002924 <HAL_I2C_Master_Transmit+0x140>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002890:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8002894:	6121      	str	r1, [r4, #16]
 8002896:	1c78      	adds	r0, r7, #1
 8002898:	d004      	beq.n	80028a4 <HAL_I2C_Master_Transmit+0xc0>
 800289a:	e0d8      	b.n	8002a4e <HAL_I2C_Master_Transmit+0x26a>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800289c:	6963      	ldr	r3, [r4, #20]
 800289e:	055a      	lsls	r2, r3, #21
 80028a0:	f100 80bd 	bmi.w	8002a1e <HAL_I2C_Master_Transmit+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028a4:	6963      	ldr	r3, [r4, #20]
 80028a6:	0799      	lsls	r1, r3, #30
 80028a8:	d5f8      	bpl.n	800289c <HAL_I2C_Master_Transmit+0xb8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028aa:	2300      	movs	r3, #0
 80028ac:	9301      	str	r3, [sp, #4]
 80028ae:	6963      	ldr	r3, [r4, #20]
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	69a3      	ldr	r3, [r4, #24]
 80028b4:	9301      	str	r3, [sp, #4]
    while (hi2c->XferSize > 0U)
 80028b6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b8:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d074      	beq.n	80029a8 <HAL_I2C_Master_Transmit+0x1c4>
 80028be:	1c79      	adds	r1, r7, #1
 80028c0:	d17f      	bne.n	80029c2 <HAL_I2C_Master_Transmit+0x1de>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028c2:	6963      	ldr	r3, [r4, #20]
 80028c4:	061a      	lsls	r2, r3, #24
 80028c6:	d441      	bmi.n	800294c <HAL_I2C_Master_Transmit+0x168>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028c8:	6963      	ldr	r3, [r4, #20]
 80028ca:	055b      	lsls	r3, r3, #21
 80028cc:	d5f9      	bpl.n	80028c2 <HAL_I2C_Master_Transmit+0xde>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028ce:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80028d0:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d2:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80028d6:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80028d8:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028da:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028de:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028e2:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e4:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ee:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	f000 80e4 	beq.w	8002abe <HAL_I2C_Master_Transmit+0x2da>
      return HAL_ERROR;
 80028f6:	2001      	movs	r0, #1
}
 80028f8:	b003      	add	sp, #12
 80028fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028fe:	6963      	ldr	r3, [r4, #20]
 8002900:	07d9      	lsls	r1, r3, #31
 8002902:	d4c1      	bmi.n	8002888 <HAL_I2C_Master_Transmit+0xa4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002904:	f7ff faa0 	bl	8001e48 <HAL_GetTick>
 8002908:	1b80      	subs	r0, r0, r6
 800290a:	4287      	cmp	r7, r0
 800290c:	f0c0 80af 	bcc.w	8002a6e <HAL_I2C_Master_Transmit+0x28a>
 8002910:	2f00      	cmp	r7, #0
 8002912:	f000 80ac 	beq.w	8002a6e <HAL_I2C_Master_Transmit+0x28a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002916:	682c      	ldr	r4, [r5, #0]
 8002918:	e7b1      	b.n	800287e <HAL_I2C_Master_Transmit+0x9a>
      __HAL_I2C_ENABLE(hi2c);
 800291a:	6823      	ldr	r3, [r4, #0]
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6023      	str	r3, [r4, #0]
 8002922:	e78a      	b.n	800283a <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002924:	ea4f 13e8 	mov.w	r3, r8, asr #7
 8002928:	f003 0306 	and.w	r3, r3, #6
 800292c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002930:	6123      	str	r3, [r4, #16]
 8002932:	1c7b      	adds	r3, r7, #1
 8002934:	d003      	beq.n	800293e <HAL_I2C_Master_Transmit+0x15a>
 8002936:	e0b3      	b.n	8002aa0 <HAL_I2C_Master_Transmit+0x2bc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002938:	6963      	ldr	r3, [r4, #20]
 800293a:	0559      	lsls	r1, r3, #21
 800293c:	d46f      	bmi.n	8002a1e <HAL_I2C_Master_Transmit+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800293e:	6963      	ldr	r3, [r4, #20]
 8002940:	0718      	lsls	r0, r3, #28
 8002942:	d5f9      	bpl.n	8002938 <HAL_I2C_Master_Transmit+0x154>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002944:	fa5f f388 	uxtb.w	r3, r8
 8002948:	6123      	str	r3, [r4, #16]
 800294a:	e7a4      	b.n	8002896 <HAL_I2C_Master_Transmit+0xb2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800294c:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 800294e:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002952:	4601      	mov	r1, r0
      hi2c->XferSize--;
 8002954:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002958:	f811 3b01 	ldrb.w	r3, [r1], #1
 800295c:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 800295e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002960:	6269      	str	r1, [r5, #36]	; 0x24
      hi2c->XferCount--;
 8002962:	3b01      	subs	r3, #1
 8002964:	b29b      	uxth	r3, r3
 8002966:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002968:	6963      	ldr	r3, [r4, #20]
      hi2c->XferSize--;
 800296a:	b292      	uxth	r2, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800296c:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 800296e:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002970:	d50c      	bpl.n	800298c <HAL_I2C_Master_Transmit+0x1a8>
 8002972:	b15a      	cbz	r2, 800298c <HAL_I2C_Master_Transmit+0x1a8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002974:	7843      	ldrb	r3, [r0, #1]
 8002976:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 8002978:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800297a:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 800297c:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->pBuffPtr++;
 8002980:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8002982:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8002984:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 8002988:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 800298a:	856b      	strh	r3, [r5, #42]	; 0x2a
 800298c:	1c78      	adds	r0, r7, #1
 800298e:	d128      	bne.n	80029e2 <HAL_I2C_Master_Transmit+0x1fe>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002990:	6963      	ldr	r3, [r4, #20]
 8002992:	0759      	lsls	r1, r3, #29
 8002994:	d405      	bmi.n	80029a2 <HAL_I2C_Master_Transmit+0x1be>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002996:	6963      	ldr	r3, [r4, #20]
 8002998:	055a      	lsls	r2, r3, #21
 800299a:	d498      	bmi.n	80028ce <HAL_I2C_Master_Transmit+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800299c:	6963      	ldr	r3, [r4, #20]
 800299e:	0759      	lsls	r1, r3, #29
 80029a0:	d5f9      	bpl.n	8002996 <HAL_I2C_Master_Transmit+0x1b2>
    while (hi2c->XferSize > 0U)
 80029a2:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d18a      	bne.n	80028be <HAL_I2C_Master_Transmit+0xda>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a8:	6823      	ldr	r3, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029aa:	2000      	movs	r0, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 80029b0:	2220      	movs	r2, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b2:	6023      	str	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80029b4:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80029b8:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029bc:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    return HAL_OK;
 80029c0:	e71f      	b.n	8002802 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029c2:	6963      	ldr	r3, [r4, #20]
 80029c4:	0618      	lsls	r0, r3, #24
 80029c6:	d4c1      	bmi.n	800294c <HAL_I2C_Master_Transmit+0x168>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029c8:	6963      	ldr	r3, [r4, #20]
 80029ca:	0558      	lsls	r0, r3, #21
 80029cc:	f53f af7f 	bmi.w	80028ce <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d0:	f7ff fa3a 	bl	8001e48 <HAL_GetTick>
 80029d4:	1b80      	subs	r0, r0, r6
 80029d6:	4287      	cmp	r7, r0
 80029d8:	d378      	bcc.n	8002acc <HAL_I2C_Master_Transmit+0x2e8>
 80029da:	2f00      	cmp	r7, #0
 80029dc:	d076      	beq.n	8002acc <HAL_I2C_Master_Transmit+0x2e8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029de:	682c      	ldr	r4, [r5, #0]
 80029e0:	e76d      	b.n	80028be <HAL_I2C_Master_Transmit+0xda>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029e2:	6963      	ldr	r3, [r4, #20]
 80029e4:	075b      	lsls	r3, r3, #29
 80029e6:	d4dc      	bmi.n	80029a2 <HAL_I2C_Master_Transmit+0x1be>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029e8:	6963      	ldr	r3, [r4, #20]
 80029ea:	055b      	lsls	r3, r3, #21
 80029ec:	f53f af6f 	bmi.w	80028ce <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f0:	f7ff fa2a 	bl	8001e48 <HAL_GetTick>
 80029f4:	1b80      	subs	r0, r0, r6
 80029f6:	4287      	cmp	r7, r0
 80029f8:	d368      	bcc.n	8002acc <HAL_I2C_Master_Transmit+0x2e8>
 80029fa:	2f00      	cmp	r7, #0
 80029fc:	d066      	beq.n	8002acc <HAL_I2C_Master_Transmit+0x2e8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029fe:	682c      	ldr	r4, [r5, #0]
 8002a00:	e7c4      	b.n	800298c <HAL_I2C_Master_Transmit+0x1a8>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a02:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a04:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a08:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a0c:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a10:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002a12:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a16:	f043 0320 	orr.w	r3, r3, #32
 8002a1a:	642b      	str	r3, [r5, #64]	; 0x40
 8002a1c:	e6f0      	b.n	8002800 <HAL_I2C_Master_Transmit+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1e:	6823      	ldr	r3, [r4, #0]
 8002a20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a24:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a26:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a28:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a2c:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a2e:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a30:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a32:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a36:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a3a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002a3c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a40:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8002a44:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a46:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002a48:	b003      	add	sp, #12
 8002a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a4e:	6963      	ldr	r3, [r4, #20]
 8002a50:	079b      	lsls	r3, r3, #30
 8002a52:	f53f af2a 	bmi.w	80028aa <HAL_I2C_Master_Transmit+0xc6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a56:	6963      	ldr	r3, [r4, #20]
 8002a58:	055b      	lsls	r3, r3, #21
 8002a5a:	d4e0      	bmi.n	8002a1e <HAL_I2C_Master_Transmit+0x23a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a5c:	f7ff f9f4 	bl	8001e48 <HAL_GetTick>
 8002a60:	1b80      	subs	r0, r0, r6
 8002a62:	4287      	cmp	r7, r0
 8002a64:	d340      	bcc.n	8002ae8 <HAL_I2C_Master_Transmit+0x304>
 8002a66:	2f00      	cmp	r7, #0
 8002a68:	d03e      	beq.n	8002ae8 <HAL_I2C_Master_Transmit+0x304>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a6a:	682c      	ldr	r4, [r5, #0]
 8002a6c:	e713      	b.n	8002896 <HAL_I2C_Master_Transmit+0xb2>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a6e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a70:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a72:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a74:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a78:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a7c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a7e:	6829      	ldr	r1, [r5, #0]
        __HAL_UNLOCK(hi2c);
 8002a80:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a84:	f042 0220 	orr.w	r2, r2, #32
 8002a88:	642a      	str	r2, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a8a:	680b      	ldr	r3, [r1, #0]
 8002a8c:	05da      	lsls	r2, r3, #23
 8002a8e:	f57f af32 	bpl.w	80028f6 <HAL_I2C_Master_Transmit+0x112>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a96:	642b      	str	r3, [r5, #64]	; 0x40
 8002a98:	e72d      	b.n	80028f6 <HAL_I2C_Master_Transmit+0x112>
 8002a9a:	bf00      	nop
 8002a9c:	ffff0000 	.word	0xffff0000
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aa0:	6963      	ldr	r3, [r4, #20]
 8002aa2:	071a      	lsls	r2, r3, #28
 8002aa4:	f53f af4e 	bmi.w	8002944 <HAL_I2C_Master_Transmit+0x160>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aa8:	6963      	ldr	r3, [r4, #20]
 8002aaa:	055a      	lsls	r2, r3, #21
 8002aac:	d4b7      	bmi.n	8002a1e <HAL_I2C_Master_Transmit+0x23a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aae:	f7ff f9cb 	bl	8001e48 <HAL_GetTick>
 8002ab2:	1b80      	subs	r0, r0, r6
 8002ab4:	4287      	cmp	r7, r0
 8002ab6:	d317      	bcc.n	8002ae8 <HAL_I2C_Master_Transmit+0x304>
 8002ab8:	b1b7      	cbz	r7, 8002ae8 <HAL_I2C_Master_Transmit+0x304>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aba:	682c      	ldr	r4, [r5, #0]
 8002abc:	e739      	b.n	8002932 <HAL_I2C_Master_Transmit+0x14e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002abe:	682a      	ldr	r2, [r5, #0]
 8002ac0:	6813      	ldr	r3, [r2, #0]
 8002ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        return HAL_ERROR;
 8002ac6:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e69a      	b.n	8002802 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002acc:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ace:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ad0:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ad2:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ad6:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ada:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002adc:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ae0:	f043 0320 	orr.w	r3, r3, #32
 8002ae4:	642b      	str	r3, [r5, #64]	; 0x40
 8002ae6:	e702      	b.n	80028ee <HAL_I2C_Master_Transmit+0x10a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ae8:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aea:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aec:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aee:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002af2:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002af6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002af8:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002afc:	f043 0320 	orr.w	r3, r3, #32
 8002b00:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8002b02:	2001      	movs	r0, #1
 8002b04:	e67d      	b.n	8002802 <HAL_I2C_Master_Transmit+0x1e>
 8002b06:	bf00      	nop

08002b08 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b08:	2800      	cmp	r0, #0
 8002b0a:	f000 81a2 	beq.w	8002e52 <HAL_RCC_OscConfig+0x34a>
{
 8002b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b12:	6803      	ldr	r3, [r0, #0]
 8002b14:	07dd      	lsls	r5, r3, #31
{
 8002b16:	b082      	sub	sp, #8
 8002b18:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b1a:	d52f      	bpl.n	8002b7c <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b1c:	499e      	ldr	r1, [pc, #632]	; (8002d98 <HAL_RCC_OscConfig+0x290>)
 8002b1e:	688a      	ldr	r2, [r1, #8]
 8002b20:	f002 020c 	and.w	r2, r2, #12
 8002b24:	2a04      	cmp	r2, #4
 8002b26:	f000 80ed 	beq.w	8002d04 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b2a:	688a      	ldr	r2, [r1, #8]
 8002b2c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b30:	2a08      	cmp	r2, #8
 8002b32:	f000 80e3 	beq.w	8002cfc <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b36:	6863      	ldr	r3, [r4, #4]
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3c:	f000 80ec 	beq.w	8002d18 <HAL_RCC_OscConfig+0x210>
 8002b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b44:	f000 8175 	beq.w	8002e32 <HAL_RCC_OscConfig+0x32a>
 8002b48:	4d93      	ldr	r5, [pc, #588]	; (8002d98 <HAL_RCC_OscConfig+0x290>)
 8002b4a:	682a      	ldr	r2, [r5, #0]
 8002b4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b50:	602a      	str	r2, [r5, #0]
 8002b52:	682a      	ldr	r2, [r5, #0]
 8002b54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b58:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f040 80e1 	bne.w	8002d22 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7ff f972 	bl	8001e48 <HAL_GetTick>
 8002b64:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b66:	e005      	b.n	8002b74 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b68:	f7ff f96e 	bl	8001e48 <HAL_GetTick>
 8002b6c:	1b80      	subs	r0, r0, r6
 8002b6e:	2864      	cmp	r0, #100	; 0x64
 8002b70:	f200 8101 	bhi.w	8002d76 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b74:	682b      	ldr	r3, [r5, #0]
 8002b76:	039b      	lsls	r3, r3, #14
 8002b78:	d4f6      	bmi.n	8002b68 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	079f      	lsls	r7, r3, #30
 8002b7e:	d528      	bpl.n	8002bd2 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b80:	4a85      	ldr	r2, [pc, #532]	; (8002d98 <HAL_RCC_OscConfig+0x290>)
 8002b82:	6891      	ldr	r1, [r2, #8]
 8002b84:	f011 0f0c 	tst.w	r1, #12
 8002b88:	f000 8090 	beq.w	8002cac <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b8c:	6891      	ldr	r1, [r2, #8]
 8002b8e:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b92:	2908      	cmp	r1, #8
 8002b94:	f000 8086 	beq.w	8002ca4 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b98:	68e3      	ldr	r3, [r4, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 810e 	beq.w	8002dbc <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba0:	4b7e      	ldr	r3, [pc, #504]	; (8002d9c <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba2:	4e7d      	ldr	r6, [pc, #500]	; (8002d98 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ba8:	f7ff f94e 	bl	8001e48 <HAL_GetTick>
 8002bac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bae:	e005      	b.n	8002bbc <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb0:	f7ff f94a 	bl	8001e48 <HAL_GetTick>
 8002bb4:	1b40      	subs	r0, r0, r5
 8002bb6:	2802      	cmp	r0, #2
 8002bb8:	f200 80dd 	bhi.w	8002d76 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbc:	6833      	ldr	r3, [r6, #0]
 8002bbe:	0798      	lsls	r0, r3, #30
 8002bc0:	d5f6      	bpl.n	8002bb0 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc2:	6833      	ldr	r3, [r6, #0]
 8002bc4:	6922      	ldr	r2, [r4, #16]
 8002bc6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002bca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002bce:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	071a      	lsls	r2, r3, #28
 8002bd4:	d451      	bmi.n	8002c7a <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd6:	0758      	lsls	r0, r3, #29
 8002bd8:	d52f      	bpl.n	8002c3a <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bda:	4a6f      	ldr	r2, [pc, #444]	; (8002d98 <HAL_RCC_OscConfig+0x290>)
 8002bdc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002bde:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8002be2:	d07f      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8002be4:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be6:	4e6e      	ldr	r6, [pc, #440]	; (8002da0 <HAL_RCC_OscConfig+0x298>)
 8002be8:	6833      	ldr	r3, [r6, #0]
 8002bea:	05d9      	lsls	r1, r3, #23
 8002bec:	f140 80b3 	bpl.w	8002d56 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf0:	68a3      	ldr	r3, [r4, #8]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	f000 80c3 	beq.w	8002d7e <HAL_RCC_OscConfig+0x276>
 8002bf8:	2b05      	cmp	r3, #5
 8002bfa:	f000 812c 	beq.w	8002e56 <HAL_RCC_OscConfig+0x34e>
 8002bfe:	4e66      	ldr	r6, [pc, #408]	; (8002d98 <HAL_RCC_OscConfig+0x290>)
 8002c00:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002c02:	f022 0201 	bic.w	r2, r2, #1
 8002c06:	6732      	str	r2, [r6, #112]	; 0x70
 8002c08:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002c0a:	f022 0204 	bic.w	r2, r2, #4
 8002c0e:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f040 80b9 	bne.w	8002d88 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c16:	f7ff f917 	bl	8001e48 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c1a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002c1e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c20:	e005      	b.n	8002c2e <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c22:	f7ff f911 	bl	8001e48 <HAL_GetTick>
 8002c26:	1bc0      	subs	r0, r0, r7
 8002c28:	4540      	cmp	r0, r8
 8002c2a:	f200 80a4 	bhi.w	8002d76 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c2e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002c30:	0798      	lsls	r0, r3, #30
 8002c32:	d4f6      	bmi.n	8002c22 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	f040 8106 	bne.w	8002e46 <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3a:	69a0      	ldr	r0, [r4, #24]
 8002c3c:	b1c8      	cbz	r0, 8002c72 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c3e:	4d56      	ldr	r5, [pc, #344]	; (8002d98 <HAL_RCC_OscConfig+0x290>)
 8002c40:	68ab      	ldr	r3, [r5, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	f000 80c9 	beq.w	8002dde <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4c:	4b53      	ldr	r3, [pc, #332]	; (8002d9c <HAL_RCC_OscConfig+0x294>)
 8002c4e:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c50:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002c52:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c54:	f000 8109 	beq.w	8002e6a <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7ff f8f6 	bl	8001e48 <HAL_GetTick>
 8002c5c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5e:	e005      	b.n	8002c6c <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c60:	f7ff f8f2 	bl	8001e48 <HAL_GetTick>
 8002c64:	1b00      	subs	r0, r0, r4
 8002c66:	2802      	cmp	r0, #2
 8002c68:	f200 8085 	bhi.w	8002d76 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6c:	682b      	ldr	r3, [r5, #0]
 8002c6e:	019b      	lsls	r3, r3, #6
 8002c70:	d4f6      	bmi.n	8002c60 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002c72:	2000      	movs	r0, #0
}
 8002c74:	b002      	add	sp, #8
 8002c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c7a:	6963      	ldr	r3, [r4, #20]
 8002c7c:	b30b      	cbz	r3, 8002cc2 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8002c7e:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c80:	4e45      	ldr	r6, [pc, #276]	; (8002d98 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8002c82:	2201      	movs	r2, #1
 8002c84:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002c88:	f7ff f8de 	bl	8001e48 <HAL_GetTick>
 8002c8c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8e:	e004      	b.n	8002c9a <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c90:	f7ff f8da 	bl	8001e48 <HAL_GetTick>
 8002c94:	1b40      	subs	r0, r0, r5
 8002c96:	2802      	cmp	r0, #2
 8002c98:	d86d      	bhi.n	8002d76 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002c9c:	079b      	lsls	r3, r3, #30
 8002c9e:	d5f7      	bpl.n	8002c90 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	e798      	b.n	8002bd6 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ca4:	6852      	ldr	r2, [r2, #4]
 8002ca6:	0256      	lsls	r6, r2, #9
 8002ca8:	f53f af76 	bmi.w	8002b98 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cac:	4a3a      	ldr	r2, [pc, #232]	; (8002d98 <HAL_RCC_OscConfig+0x290>)
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	0795      	lsls	r5, r2, #30
 8002cb2:	d544      	bpl.n	8002d3e <HAL_RCC_OscConfig+0x236>
 8002cb4:	68e2      	ldr	r2, [r4, #12]
 8002cb6:	2a01      	cmp	r2, #1
 8002cb8:	d041      	beq.n	8002d3e <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 8002cba:	2001      	movs	r0, #1
}
 8002cbc:	b002      	add	sp, #8
 8002cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002cc2:	4a36      	ldr	r2, [pc, #216]	; (8002d9c <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc4:	4e34      	ldr	r6, [pc, #208]	; (8002d98 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8002cc6:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002cca:	f7ff f8bd 	bl	8001e48 <HAL_GetTick>
 8002cce:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd0:	e004      	b.n	8002cdc <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd2:	f7ff f8b9 	bl	8001e48 <HAL_GetTick>
 8002cd6:	1b40      	subs	r0, r0, r5
 8002cd8:	2802      	cmp	r0, #2
 8002cda:	d84c      	bhi.n	8002d76 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cdc:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002cde:	079f      	lsls	r7, r3, #30
 8002ce0:	d4f7      	bmi.n	8002cd2 <HAL_RCC_OscConfig+0x1ca>
 8002ce2:	e7dd      	b.n	8002ca0 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cec:	6413      	str	r3, [r2, #64]	; 0x40
 8002cee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002cf8:	2501      	movs	r5, #1
 8002cfa:	e774      	b.n	8002be6 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cfc:	684a      	ldr	r2, [r1, #4]
 8002cfe:	0250      	lsls	r0, r2, #9
 8002d00:	f57f af19 	bpl.w	8002b36 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d04:	4a24      	ldr	r2, [pc, #144]	; (8002d98 <HAL_RCC_OscConfig+0x290>)
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	0391      	lsls	r1, r2, #14
 8002d0a:	f57f af37 	bpl.w	8002b7c <HAL_RCC_OscConfig+0x74>
 8002d0e:	6862      	ldr	r2, [r4, #4]
 8002d10:	2a00      	cmp	r2, #0
 8002d12:	f47f af33 	bne.w	8002b7c <HAL_RCC_OscConfig+0x74>
 8002d16:	e7d0      	b.n	8002cba <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d18:	4a1f      	ldr	r2, [pc, #124]	; (8002d98 <HAL_RCC_OscConfig+0x290>)
 8002d1a:	6813      	ldr	r3, [r2, #0]
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d22:	f7ff f891 	bl	8001e48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	4e1c      	ldr	r6, [pc, #112]	; (8002d98 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8002d28:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	e004      	b.n	8002d36 <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7ff f88c 	bl	8001e48 <HAL_GetTick>
 8002d30:	1b40      	subs	r0, r0, r5
 8002d32:	2864      	cmp	r0, #100	; 0x64
 8002d34:	d81f      	bhi.n	8002d76 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	6833      	ldr	r3, [r6, #0]
 8002d38:	039a      	lsls	r2, r3, #14
 8002d3a:	d5f7      	bpl.n	8002d2c <HAL_RCC_OscConfig+0x224>
 8002d3c:	e71d      	b.n	8002b7a <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3e:	4916      	ldr	r1, [pc, #88]	; (8002d98 <HAL_RCC_OscConfig+0x290>)
 8002d40:	6920      	ldr	r0, [r4, #16]
 8002d42:	680a      	ldr	r2, [r1, #0]
 8002d44:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002d48:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002d4c:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4e:	071a      	lsls	r2, r3, #28
 8002d50:	f57f af41 	bpl.w	8002bd6 <HAL_RCC_OscConfig+0xce>
 8002d54:	e791      	b.n	8002c7a <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d56:	6833      	ldr	r3, [r6, #0]
 8002d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002d5e:	f7ff f873 	bl	8001e48 <HAL_GetTick>
 8002d62:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d64:	6833      	ldr	r3, [r6, #0]
 8002d66:	05da      	lsls	r2, r3, #23
 8002d68:	f53f af42 	bmi.w	8002bf0 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6c:	f7ff f86c 	bl	8001e48 <HAL_GetTick>
 8002d70:	1bc0      	subs	r0, r0, r7
 8002d72:	2802      	cmp	r0, #2
 8002d74:	d9f6      	bls.n	8002d64 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8002d76:	2003      	movs	r0, #3
}
 8002d78:	b002      	add	sp, #8
 8002d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d7e:	4a06      	ldr	r2, [pc, #24]	; (8002d98 <HAL_RCC_OscConfig+0x290>)
 8002d80:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002d88:	f7ff f85e 	bl	8001e48 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8c:	4f02      	ldr	r7, [pc, #8]	; (8002d98 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8002d8e:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d90:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d94:	e00b      	b.n	8002dae <HAL_RCC_OscConfig+0x2a6>
 8002d96:	bf00      	nop
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	42470000 	.word	0x42470000
 8002da0:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da4:	f7ff f850 	bl	8001e48 <HAL_GetTick>
 8002da8:	1b80      	subs	r0, r0, r6
 8002daa:	4540      	cmp	r0, r8
 8002dac:	d8e3      	bhi.n	8002d76 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002db0:	079b      	lsls	r3, r3, #30
 8002db2:	d5f7      	bpl.n	8002da4 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8002db4:	2d00      	cmp	r5, #0
 8002db6:	f43f af40 	beq.w	8002c3a <HAL_RCC_OscConfig+0x132>
 8002dba:	e044      	b.n	8002e46 <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8002dbc:	4a42      	ldr	r2, [pc, #264]	; (8002ec8 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	4e43      	ldr	r6, [pc, #268]	; (8002ecc <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8002dc0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002dc2:	f7ff f841 	bl	8001e48 <HAL_GetTick>
 8002dc6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc8:	e004      	b.n	8002dd4 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dca:	f7ff f83d 	bl	8001e48 <HAL_GetTick>
 8002dce:	1b40      	subs	r0, r0, r5
 8002dd0:	2802      	cmp	r0, #2
 8002dd2:	d8d0      	bhi.n	8002d76 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd4:	6833      	ldr	r3, [r6, #0]
 8002dd6:	0799      	lsls	r1, r3, #30
 8002dd8:	d4f7      	bmi.n	8002dca <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dda:	6823      	ldr	r3, [r4, #0]
 8002ddc:	e6f9      	b.n	8002bd2 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dde:	2801      	cmp	r0, #1
 8002de0:	f43f af48 	beq.w	8002c74 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8002de4:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de6:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de8:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dec:	4291      	cmp	r1, r2
 8002dee:	f47f af64 	bne.w	8002cba <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df2:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df4:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df8:	4291      	cmp	r1, r2
 8002dfa:	f47f af5e 	bne.w	8002cba <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dfe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002e00:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002e04:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e06:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002e0a:	f47f af56 	bne.w	8002cba <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002e10:	0852      	lsrs	r2, r2, #1
 8002e12:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002e16:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e18:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002e1c:	f47f af4d 	bne.w	8002cba <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e22:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e26:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8002e2a:	bf14      	ite	ne
 8002e2c:	2001      	movne	r0, #1
 8002e2e:	2000      	moveq	r0, #0
 8002e30:	e720      	b.n	8002c74 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e32:	4b26      	ldr	r3, [pc, #152]	; (8002ecc <HAL_RCC_OscConfig+0x3c4>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	e76d      	b.n	8002d22 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e46:	4a21      	ldr	r2, [pc, #132]	; (8002ecc <HAL_RCC_OscConfig+0x3c4>)
 8002e48:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e50:	e6f3      	b.n	8002c3a <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8002e52:	2001      	movs	r0, #1
}
 8002e54:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e56:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <HAL_RCC_OscConfig+0x3c4>)
 8002e58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e5a:	f042 0204 	orr.w	r2, r2, #4
 8002e5e:	671a      	str	r2, [r3, #112]	; 0x70
 8002e60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	671a      	str	r2, [r3, #112]	; 0x70
 8002e68:	e78e      	b.n	8002d88 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8002e6a:	f7fe ffed 	bl	8001e48 <HAL_GetTick>
 8002e6e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e70:	e005      	b.n	8002e7e <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e72:	f7fe ffe9 	bl	8001e48 <HAL_GetTick>
 8002e76:	1b80      	subs	r0, r0, r6
 8002e78:	2802      	cmp	r0, #2
 8002e7a:	f63f af7c 	bhi.w	8002d76 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7e:	682b      	ldr	r3, [r5, #0]
 8002e80:	0199      	lsls	r1, r3, #6
 8002e82:	d4f6      	bmi.n	8002e72 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e84:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002e88:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002e90:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8002e94:	0852      	lsrs	r2, r2, #1
 8002e96:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002e9a:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002e9c:	490a      	ldr	r1, [pc, #40]	; (8002ec8 <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8002ea2:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ea4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002ea6:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002ea8:	f7fe ffce 	bl	8001e48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eac:	4d07      	ldr	r5, [pc, #28]	; (8002ecc <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8002eae:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb0:	e005      	b.n	8002ebe <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb2:	f7fe ffc9 	bl	8001e48 <HAL_GetTick>
 8002eb6:	1b00      	subs	r0, r0, r4
 8002eb8:	2802      	cmp	r0, #2
 8002eba:	f63f af5c 	bhi.w	8002d76 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ebe:	682b      	ldr	r3, [r5, #0]
 8002ec0:	019a      	lsls	r2, r3, #6
 8002ec2:	d5f6      	bpl.n	8002eb2 <HAL_RCC_OscConfig+0x3aa>
 8002ec4:	e6d5      	b.n	8002c72 <HAL_RCC_OscConfig+0x16a>
 8002ec6:	bf00      	nop
 8002ec8:	42470000 	.word	0x42470000
 8002ecc:	40023800 	.word	0x40023800

08002ed0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed0:	4916      	ldr	r1, [pc, #88]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8002ed2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed4:	688b      	ldr	r3, [r1, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d01b      	beq.n	8002f16 <HAL_RCC_GetSysClockFreq+0x46>
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d117      	bne.n	8002f12 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ee4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ee8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eec:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef0:	d113      	bne.n	8002f1a <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef2:	480f      	ldr	r0, [pc, #60]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x60>)
 8002ef4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002ef8:	fba1 0100 	umull	r0, r1, r1, r0
 8002efc:	f7fd fbb0 	bl	8000660 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f00:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x5c>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002f08:	3301      	adds	r3, #1
 8002f0a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002f0c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002f10:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002f12:	4807      	ldr	r0, [pc, #28]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8002f14:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f16:	4807      	ldr	r0, [pc, #28]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002f18:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1a:	4806      	ldr	r0, [pc, #24]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x64>)
 8002f1c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002f20:	2300      	movs	r3, #0
 8002f22:	fba1 0100 	umull	r0, r1, r1, r0
 8002f26:	f7fd fb9b 	bl	8000660 <__aeabi_uldivmod>
 8002f2a:	e7e9      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x30>
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	00f42400 	.word	0x00f42400
 8002f34:	007a1200 	.word	0x007a1200

08002f38 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002f38:	2800      	cmp	r0, #0
 8002f3a:	f000 8087 	beq.w	800304c <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f3e:	4a48      	ldr	r2, [pc, #288]	; (8003060 <HAL_RCC_ClockConfig+0x128>)
 8002f40:	6813      	ldr	r3, [r2, #0]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	428b      	cmp	r3, r1
{
 8002f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f4c:	460d      	mov	r5, r1
 8002f4e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f50:	d209      	bcs.n	8002f66 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	b2cb      	uxtb	r3, r1
 8002f54:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	6813      	ldr	r3, [r2, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	428b      	cmp	r3, r1
 8002f5e:	d002      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002f60:	2001      	movs	r0, #1
}
 8002f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	0798      	lsls	r0, r3, #30
 8002f6a:	d514      	bpl.n	8002f96 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	0759      	lsls	r1, r3, #29
 8002f6e:	d504      	bpl.n	8002f7a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f70:	493c      	ldr	r1, [pc, #240]	; (8003064 <HAL_RCC_ClockConfig+0x12c>)
 8002f72:	688a      	ldr	r2, [r1, #8]
 8002f74:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002f78:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7a:	071a      	lsls	r2, r3, #28
 8002f7c:	d504      	bpl.n	8002f88 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f7e:	4939      	ldr	r1, [pc, #228]	; (8003064 <HAL_RCC_ClockConfig+0x12c>)
 8002f80:	688a      	ldr	r2, [r1, #8]
 8002f82:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8002f86:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f88:	4936      	ldr	r1, [pc, #216]	; (8003064 <HAL_RCC_ClockConfig+0x12c>)
 8002f8a:	68a0      	ldr	r0, [r4, #8]
 8002f8c:	688a      	ldr	r2, [r1, #8]
 8002f8e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002f92:	4302      	orrs	r2, r0
 8002f94:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f96:	07df      	lsls	r7, r3, #31
 8002f98:	d521      	bpl.n	8002fde <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9a:	6862      	ldr	r2, [r4, #4]
 8002f9c:	2a01      	cmp	r2, #1
 8002f9e:	d057      	beq.n	8003050 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fa0:	1e93      	subs	r3, r2, #2
 8002fa2:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa4:	4b2f      	ldr	r3, [pc, #188]	; (8003064 <HAL_RCC_ClockConfig+0x12c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fa8:	d94d      	bls.n	8003046 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002faa:	0799      	lsls	r1, r3, #30
 8002fac:	d5d8      	bpl.n	8002f60 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fae:	4e2d      	ldr	r6, [pc, #180]	; (8003064 <HAL_RCC_ClockConfig+0x12c>)
 8002fb0:	68b3      	ldr	r3, [r6, #8]
 8002fb2:	f023 0303 	bic.w	r3, r3, #3
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002fba:	f7fe ff45 	bl	8001e48 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fbe:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002fc2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc4:	e004      	b.n	8002fd0 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc6:	f7fe ff3f 	bl	8001e48 <HAL_GetTick>
 8002fca:	1bc0      	subs	r0, r0, r7
 8002fcc:	4540      	cmp	r0, r8
 8002fce:	d844      	bhi.n	800305a <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd0:	68b3      	ldr	r3, [r6, #8]
 8002fd2:	6862      	ldr	r2, [r4, #4]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002fdc:	d1f3      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fde:	4a20      	ldr	r2, [pc, #128]	; (8003060 <HAL_RCC_ClockConfig+0x128>)
 8002fe0:	6813      	ldr	r3, [r2, #0]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	42ab      	cmp	r3, r5
 8002fe8:	d906      	bls.n	8002ff8 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	b2eb      	uxtb	r3, r5
 8002fec:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	6813      	ldr	r3, [r2, #0]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	42ab      	cmp	r3, r5
 8002ff6:	d1b3      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	075a      	lsls	r2, r3, #29
 8002ffc:	d506      	bpl.n	800300c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ffe:	4919      	ldr	r1, [pc, #100]	; (8003064 <HAL_RCC_ClockConfig+0x12c>)
 8003000:	68e0      	ldr	r0, [r4, #12]
 8003002:	688a      	ldr	r2, [r1, #8]
 8003004:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003008:	4302      	orrs	r2, r0
 800300a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300c:	071b      	lsls	r3, r3, #28
 800300e:	d507      	bpl.n	8003020 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003010:	4a14      	ldr	r2, [pc, #80]	; (8003064 <HAL_RCC_ClockConfig+0x12c>)
 8003012:	6921      	ldr	r1, [r4, #16]
 8003014:	6893      	ldr	r3, [r2, #8]
 8003016:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800301a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800301e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003020:	f7ff ff56 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8003024:	4a0f      	ldr	r2, [pc, #60]	; (8003064 <HAL_RCC_ClockConfig+0x12c>)
 8003026:	4c10      	ldr	r4, [pc, #64]	; (8003068 <HAL_RCC_ClockConfig+0x130>)
 8003028:	6892      	ldr	r2, [r2, #8]
 800302a:	4910      	ldr	r1, [pc, #64]	; (800306c <HAL_RCC_ClockConfig+0x134>)
 800302c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003030:	4603      	mov	r3, r0
 8003032:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8003034:	480e      	ldr	r0, [pc, #56]	; (8003070 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003036:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8003038:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800303a:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 800303c:	f7fe feba 	bl	8001db4 <HAL_InitTick>
  return HAL_OK;
 8003040:	2000      	movs	r0, #0
}
 8003042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003046:	0198      	lsls	r0, r3, #6
 8003048:	d4b1      	bmi.n	8002fae <HAL_RCC_ClockConfig+0x76>
 800304a:	e789      	b.n	8002f60 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800304c:	2001      	movs	r0, #1
}
 800304e:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003050:	4b04      	ldr	r3, [pc, #16]	; (8003064 <HAL_RCC_ClockConfig+0x12c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	039e      	lsls	r6, r3, #14
 8003056:	d4aa      	bmi.n	8002fae <HAL_RCC_ClockConfig+0x76>
 8003058:	e782      	b.n	8002f60 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800305a:	2003      	movs	r0, #3
 800305c:	e781      	b.n	8002f62 <HAL_RCC_ClockConfig+0x2a>
 800305e:	bf00      	nop
 8003060:	40023c00 	.word	0x40023c00
 8003064:	40023800 	.word	0x40023800
 8003068:	080035e0 	.word	0x080035e0
 800306c:	20000030 	.word	0x20000030
 8003070:	20000038 	.word	0x20000038

08003074 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003074:	4b04      	ldr	r3, [pc, #16]	; (8003088 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8003076:	4905      	ldr	r1, [pc, #20]	; (800308c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	4a05      	ldr	r2, [pc, #20]	; (8003090 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800307c:	6808      	ldr	r0, [r1, #0]
 800307e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003082:	5cd3      	ldrb	r3, [r2, r3]
}
 8003084:	40d8      	lsrs	r0, r3
 8003086:	4770      	bx	lr
 8003088:	40023800 	.word	0x40023800
 800308c:	20000030 	.word	0x20000030
 8003090:	080035f0 	.word	0x080035f0

08003094 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003094:	2800      	cmp	r0, #0
 8003096:	d076      	beq.n	8003186 <HAL_TIM_Base_Init+0xf2>
{
 8003098:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800309a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800309e:	4604      	mov	r4, r0
 80030a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d055      	beq.n	8003154 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a8:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030aa:	4938      	ldr	r1, [pc, #224]	; (800318c <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	2302      	movs	r3, #2
 80030ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030b2:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80030b4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030b6:	d052      	beq.n	800315e <HAL_TIM_Base_Init+0xca>
 80030b8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80030bc:	d021      	beq.n	8003102 <HAL_TIM_Base_Init+0x6e>
 80030be:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80030c2:	428a      	cmp	r2, r1
 80030c4:	d01d      	beq.n	8003102 <HAL_TIM_Base_Init+0x6e>
 80030c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80030ca:	428a      	cmp	r2, r1
 80030cc:	d019      	beq.n	8003102 <HAL_TIM_Base_Init+0x6e>
 80030ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80030d2:	428a      	cmp	r2, r1
 80030d4:	d015      	beq.n	8003102 <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030d6:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80030da:	428a      	cmp	r2, r1
 80030dc:	d015      	beq.n	800310a <HAL_TIM_Base_Init+0x76>
 80030de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80030e2:	428a      	cmp	r2, r1
 80030e4:	d011      	beq.n	800310a <HAL_TIM_Base_Init+0x76>
 80030e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80030ea:	428a      	cmp	r2, r1
 80030ec:	d00d      	beq.n	800310a <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030ee:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030f6:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80030f8:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030fa:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030fc:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80030fe:	6293      	str	r3, [r2, #40]	; 0x28
 8003100:	e010      	b.n	8003124 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8003102:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003108:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800310a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800310c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800310e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003112:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003118:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800311a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800311c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800311e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003120:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003122:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003124:	2301      	movs	r3, #1
 8003126:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003128:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800312c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003130:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003134:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003138:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003144:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003148:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800314c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003150:	2000      	movs	r0, #0
}
 8003152:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003154:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003158:	f7fe fd32 	bl	8001bc0 <HAL_TIM_Base_MspInit>
 800315c:	e7a4      	b.n	80030a8 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800315e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003160:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003166:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8003168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800316c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800316e:	69a1      	ldr	r1, [r4, #24]
 8003170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003174:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003176:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003178:	68e3      	ldr	r3, [r4, #12]
 800317a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800317c:	6863      	ldr	r3, [r4, #4]
 800317e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003180:	6963      	ldr	r3, [r4, #20]
 8003182:	6313      	str	r3, [r2, #48]	; 0x30
 8003184:	e7ce      	b.n	8003124 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 8003186:	2001      	movs	r0, #1
}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40010000 	.word	0x40010000

08003190 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003190:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003194:	2b01      	cmp	r3, #1
 8003196:	d127      	bne.n	80031e8 <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003198:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800319a:	4915      	ldr	r1, [pc, #84]	; (80031f0 <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	2202      	movs	r2, #2
 800319e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031a2:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a4:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ac:	d011      	beq.n	80031d2 <HAL_TIM_Base_Start_IT+0x42>
 80031ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b2:	d00e      	beq.n	80031d2 <HAL_TIM_Base_Start_IT+0x42>
 80031b4:	4a0f      	ldr	r2, [pc, #60]	; (80031f4 <HAL_TIM_Base_Start_IT+0x64>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00b      	beq.n	80031d2 <HAL_TIM_Base_Start_IT+0x42>
 80031ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031be:	4293      	cmp	r3, r2
 80031c0:	d007      	beq.n	80031d2 <HAL_TIM_Base_Start_IT+0x42>
 80031c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d003      	beq.n	80031d2 <HAL_TIM_Base_Start_IT+0x42>
 80031ca:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d104      	bne.n	80031dc <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d8:	2a06      	cmp	r2, #6
 80031da:	d007      	beq.n	80031ec <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 80031e2:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	4770      	bx	lr
    return HAL_ERROR;
 80031e8:	2001      	movs	r0, #1
 80031ea:	4770      	bx	lr
  return HAL_OK;
 80031ec:	2000      	movs	r0, #0
}
 80031ee:	4770      	bx	lr
 80031f0:	40010000 	.word	0x40010000
 80031f4:	40000400 	.word	0x40000400

080031f8 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80031f8:	6803      	ldr	r3, [r0, #0]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	f022 0201 	bic.w	r2, r2, #1
 8003200:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8003202:	6a1a      	ldr	r2, [r3, #32]
 8003204:	f241 1111 	movw	r1, #4369	; 0x1111
 8003208:	420a      	tst	r2, r1
 800320a:	d108      	bne.n	800321e <HAL_TIM_Base_Stop_IT+0x26>
 800320c:	6a19      	ldr	r1, [r3, #32]
 800320e:	f240 4244 	movw	r2, #1092	; 0x444
 8003212:	4211      	tst	r1, r2
 8003214:	d103      	bne.n	800321e <HAL_TIM_Base_Stop_IT+0x26>
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	f022 0201 	bic.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800321e:	2301      	movs	r3, #1
 8003220:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8003224:	2000      	movs	r0, #0
 8003226:	4770      	bx	lr

08003228 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003228:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800322c:	2b01      	cmp	r3, #1
 800322e:	d075      	beq.n	800331c <HAL_TIM_ConfigClockSource+0xf4>
 8003230:	4602      	mov	r2, r0
{
 8003232:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003234:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8003236:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800323c:	2001      	movs	r0, #1
 800323e:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003242:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003244:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003248:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800324c:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800324e:	680b      	ldr	r3, [r1, #0]
 8003250:	2b60      	cmp	r3, #96	; 0x60
 8003252:	d065      	beq.n	8003320 <HAL_TIM_ConfigClockSource+0xf8>
 8003254:	d824      	bhi.n	80032a0 <HAL_TIM_ConfigClockSource+0x78>
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d07c      	beq.n	8003354 <HAL_TIM_ConfigClockSource+0x12c>
 800325a:	d94b      	bls.n	80032f4 <HAL_TIM_ConfigClockSource+0xcc>
 800325c:	2b50      	cmp	r3, #80	; 0x50
 800325e:	d117      	bne.n	8003290 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003260:	6848      	ldr	r0, [r1, #4]
 8003262:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003264:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003266:	6a23      	ldr	r3, [r4, #32]
 8003268:	f023 0301 	bic.w	r3, r3, #1
 800326c:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800326e:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003270:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003274:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8003278:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800327a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800327e:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003280:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003282:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003288:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 800328c:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800328e:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003290:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8003292:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003294:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003298:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800329c:	bc30      	pop	{r4, r5}
 800329e:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80032a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a4:	d038      	beq.n	8003318 <HAL_TIM_ConfigClockSource+0xf0>
 80032a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032aa:	d110      	bne.n	80032ce <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032ac:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80032b0:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032b2:	432b      	orrs	r3, r5
 80032b4:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032b6:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032ba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80032be:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032c0:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032c2:	68a3      	ldr	r3, [r4, #8]
 80032c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 80032c8:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032ca:	60a3      	str	r3, [r4, #8]
      break;
 80032cc:	e7e0      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80032ce:	2b70      	cmp	r3, #112	; 0x70
 80032d0:	d1de      	bne.n	8003290 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032d2:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80032d6:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032d8:	432b      	orrs	r3, r5
 80032da:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032dc:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032e0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80032e4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80032e6:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80032e8:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 80032ee:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 80032f0:	60a3      	str	r3, [r4, #8]
      break;
 80032f2:	e7cd      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80032f4:	2b20      	cmp	r3, #32
 80032f6:	d002      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0xd6>
 80032f8:	d90a      	bls.n	8003310 <HAL_TIM_ConfigClockSource+0xe8>
 80032fa:	2b30      	cmp	r3, #48	; 0x30
 80032fc:	d1c8      	bne.n	8003290 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80032fe:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003300:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003304:	430b      	orrs	r3, r1
 8003306:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 800330a:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 800330c:	60a3      	str	r3, [r4, #8]
}
 800330e:	e7bf      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8003310:	f033 0110 	bics.w	r1, r3, #16
 8003314:	d1bc      	bne.n	8003290 <HAL_TIM_ConfigClockSource+0x68>
 8003316:	e7f2      	b.n	80032fe <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8003318:	2000      	movs	r0, #0
 800331a:	e7b9      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 800331c:	2002      	movs	r0, #2
}
 800331e:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003320:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003322:	68cb      	ldr	r3, [r1, #12]
 8003324:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003326:	f020 0010 	bic.w	r0, r0, #16
 800332a:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800332c:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800332e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003332:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8003336:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8003338:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800333a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800333e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8003342:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003344:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800334a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 800334e:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8003350:	60a3      	str	r3, [r4, #8]
}
 8003352:	e79d      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003354:	6848      	ldr	r0, [r1, #4]
 8003356:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003358:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800335a:	6a23      	ldr	r3, [r4, #32]
 800335c:	f023 0301 	bic.w	r3, r3, #1
 8003360:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003362:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003364:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003368:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800336c:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800336e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003372:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003374:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003376:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800337c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8003380:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8003382:	60a3      	str	r3, [r4, #8]
}
 8003384:	e784      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x68>
 8003386:	bf00      	nop

08003388 <HAL_TIM_OC_DelayElapsedCallback>:
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop

0800338c <HAL_TIM_IC_CaptureCallback>:
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop

08003390 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop

08003394 <HAL_TIM_TriggerCallback>:
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop

08003398 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003398:	6803      	ldr	r3, [r0, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	0791      	lsls	r1, r2, #30
{
 800339e:	b510      	push	{r4, lr}
 80033a0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033a2:	d502      	bpl.n	80033aa <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	0792      	lsls	r2, r2, #30
 80033a8:	d45f      	bmi.n	800346a <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	0750      	lsls	r0, r2, #29
 80033ae:	d502      	bpl.n	80033b6 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	0751      	lsls	r1, r2, #29
 80033b4:	d446      	bmi.n	8003444 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	0712      	lsls	r2, r2, #28
 80033ba:	d502      	bpl.n	80033c2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	0710      	lsls	r0, r2, #28
 80033c0:	d42e      	bmi.n	8003420 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	06d2      	lsls	r2, r2, #27
 80033c6:	d502      	bpl.n	80033ce <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	06d0      	lsls	r0, r2, #27
 80033cc:	d418      	bmi.n	8003400 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	07d1      	lsls	r1, r2, #31
 80033d2:	d502      	bpl.n	80033da <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	07d2      	lsls	r2, r2, #31
 80033d8:	d45d      	bmi.n	8003496 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	0610      	lsls	r0, r2, #24
 80033de:	d502      	bpl.n	80033e6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	0611      	lsls	r1, r2, #24
 80033e4:	d45f      	bmi.n	80034a6 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	0652      	lsls	r2, r2, #25
 80033ea:	d502      	bpl.n	80033f2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	0650      	lsls	r0, r2, #25
 80033f0:	d461      	bmi.n	80034b6 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	0691      	lsls	r1, r2, #26
 80033f6:	d502      	bpl.n	80033fe <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	0692      	lsls	r2, r2, #26
 80033fc:	d443      	bmi.n	8003486 <HAL_TIM_IRQHandler+0xee>
}
 80033fe:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003400:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003404:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003406:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003408:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003410:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003412:	d064      	beq.n	80034de <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003414:	f7ff ffba 	bl	800338c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003418:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800341a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341c:	7722      	strb	r2, [r4, #28]
 800341e:	e7d6      	b.n	80033ce <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003420:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003424:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003426:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003428:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800342e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003430:	d152      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003432:	f7ff ffa9 	bl	8003388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003436:	4620      	mov	r0, r4
 8003438:	f7ff ffaa 	bl	8003390 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800343e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003440:	7722      	strb	r2, [r4, #28]
 8003442:	e7be      	b.n	80033c2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003444:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003448:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800344a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800344c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003454:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003456:	d13c      	bne.n	80034d2 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003458:	f7ff ff96 	bl	8003388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345c:	4620      	mov	r0, r4
 800345e:	f7ff ff97 	bl	8003390 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003462:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003464:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003466:	7722      	strb	r2, [r4, #28]
 8003468:	e7a5      	b.n	80033b6 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800346a:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800346e:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003470:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003472:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	079b      	lsls	r3, r3, #30
 8003478:	d025      	beq.n	80034c6 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800347a:	f7ff ff87 	bl	800338c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003480:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003482:	7722      	strb	r2, [r4, #28]
 8003484:	e791      	b.n	80033aa <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003486:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800348a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800348c:	611a      	str	r2, [r3, #16]
}
 800348e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003492:	f000 b863 	b.w	800355c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003496:	f06f 0201 	mvn.w	r2, #1
 800349a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800349c:	4620      	mov	r0, r4
 800349e:	f7fe fa5b 	bl	8001958 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	e799      	b.n	80033da <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80034ac:	4620      	mov	r0, r4
 80034ae:	f000 f857 	bl	8003560 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	e797      	b.n	80033e6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034ba:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80034bc:	4620      	mov	r0, r4
 80034be:	f7ff ff69 	bl	8003394 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034c2:	6823      	ldr	r3, [r4, #0]
 80034c4:	e795      	b.n	80033f2 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c6:	f7ff ff5f 	bl	8003388 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ca:	4620      	mov	r0, r4
 80034cc:	f7ff ff60 	bl	8003390 <HAL_TIM_PWM_PulseFinishedCallback>
 80034d0:	e7d5      	b.n	800347e <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80034d2:	f7ff ff5b 	bl	800338c <HAL_TIM_IC_CaptureCallback>
 80034d6:	e7c4      	b.n	8003462 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80034d8:	f7ff ff58 	bl	800338c <HAL_TIM_IC_CaptureCallback>
 80034dc:	e7ae      	b.n	800343c <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034de:	f7ff ff53 	bl	8003388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e2:	4620      	mov	r0, r4
 80034e4:	f7ff ff54 	bl	8003390 <HAL_TIM_PWM_PulseFinishedCallback>
 80034e8:	e796      	b.n	8003418 <HAL_TIM_IRQHandler+0x80>
 80034ea:	bf00      	nop

080034ec <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d02f      	beq.n	8003554 <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034f4:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80034f6:	2202      	movs	r2, #2
{
 80034f8:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80034fa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80034fe:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003500:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003502:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003504:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003508:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800350a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800350c:	4a12      	ldr	r2, [pc, #72]	; (8003558 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d012      	beq.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003516:	d00f      	beq.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003518:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800351c:	4293      	cmp	r3, r2
 800351e:	d00b      	beq.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003520:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003524:	4293      	cmp	r3, r2
 8003526:	d007      	beq.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003528:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800352c:	4293      	cmp	r3, r2
 800352e:	d003      	beq.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003530:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003534:	4293      	cmp	r3, r2
 8003536:	d104      	bne.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003538:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800353a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800353e:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003540:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003542:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003544:	2201      	movs	r2, #1
 8003546:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800354a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800354e:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8003550:	4618      	mov	r0, r3
}
 8003552:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003554:	2002      	movs	r0, #2
}
 8003556:	4770      	bx	lr
 8003558:	40010000 	.word	0x40010000

0800355c <HAL_TIMEx_CommutCallback>:
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop

08003560 <HAL_TIMEx_BreakCallback>:
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop

08003564 <abs>:
 8003564:	2800      	cmp	r0, #0
 8003566:	bfb8      	it	lt
 8003568:	4240      	neglt	r0, r0
 800356a:	4770      	bx	lr

0800356c <__libc_init_array>:
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	4d0d      	ldr	r5, [pc, #52]	; (80035a4 <__libc_init_array+0x38>)
 8003570:	4c0d      	ldr	r4, [pc, #52]	; (80035a8 <__libc_init_array+0x3c>)
 8003572:	1b64      	subs	r4, r4, r5
 8003574:	10a4      	asrs	r4, r4, #2
 8003576:	2600      	movs	r6, #0
 8003578:	42a6      	cmp	r6, r4
 800357a:	d109      	bne.n	8003590 <__libc_init_array+0x24>
 800357c:	4d0b      	ldr	r5, [pc, #44]	; (80035ac <__libc_init_array+0x40>)
 800357e:	4c0c      	ldr	r4, [pc, #48]	; (80035b0 <__libc_init_array+0x44>)
 8003580:	f000 f818 	bl	80035b4 <_init>
 8003584:	1b64      	subs	r4, r4, r5
 8003586:	10a4      	asrs	r4, r4, #2
 8003588:	2600      	movs	r6, #0
 800358a:	42a6      	cmp	r6, r4
 800358c:	d105      	bne.n	800359a <__libc_init_array+0x2e>
 800358e:	bd70      	pop	{r4, r5, r6, pc}
 8003590:	f855 3b04 	ldr.w	r3, [r5], #4
 8003594:	4798      	blx	r3
 8003596:	3601      	adds	r6, #1
 8003598:	e7ee      	b.n	8003578 <__libc_init_array+0xc>
 800359a:	f855 3b04 	ldr.w	r3, [r5], #4
 800359e:	4798      	blx	r3
 80035a0:	3601      	adds	r6, #1
 80035a2:	e7f2      	b.n	800358a <__libc_init_array+0x1e>
 80035a4:	08003600 	.word	0x08003600
 80035a8:	08003600 	.word	0x08003600
 80035ac:	08003600 	.word	0x08003600
 80035b0:	08003604 	.word	0x08003604

080035b4 <_init>:
 80035b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b6:	bf00      	nop
 80035b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ba:	bc08      	pop	{r3}
 80035bc:	469e      	mov	lr, r3
 80035be:	4770      	bx	lr

080035c0 <_fini>:
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c2:	bf00      	nop
 80035c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035c6:	bc08      	pop	{r3}
 80035c8:	469e      	mov	lr, r3
 80035ca:	4770      	bx	lr
